<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>v-row和van-col</title>
    <url>/2020/05/09/-row%E5%92%8Cvan-col/</url>
    <content><![CDATA[<p>van-row和van-col的区别是什么 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;list&quot;&gt;</span><br><span class="line">      &lt;van-row&gt;</span><br><span class="line">         &lt;van-col span&#x3D;&quot;12&quot; v-for&#x3D;&quot;item in listKanjia&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;list-item&quot; @click&#x3D;&quot;onDetailClick(item.id)&quot;&gt;</span><br><span class="line">             &lt;img class&#x3D;&quot;list-item-img&quot; :src&#x3D;&quot;item.pic&quot; :alt&#x3D;&quot;item.name&quot;&gt;</span><br><span class="line">             &lt;div class&#x3D;&quot;list-item-hd van-ellipsis&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">             &lt;div class&#x3D;&quot;list-item-bd&quot;&gt;&lt;span class&#x3D;&quot;ui-c-red&quot;&gt;￥&#123;&#123;item.kanjiaPrice&#125;&#125;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;ui-c-dark ui-text-deleted&quot;&gt;￥&#123;&#123;item.originalPrice&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line">         &lt;&#x2F;van-col&gt;</span><br><span class="line">      &lt;&#x2F;van-row&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>5.14</title>
    <url>/2020/05/14/14/</url>
    <content><![CDATA[<p><strong>欲买桂花同载酒，终不似，少年游</strong></p>
]]></content>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/2020/04/20/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h1><a id="more"></a> 
<p>属性和值 </p>
<pre><code>p
{
color:red;
text-align:center;
}
/*这是个注释*/</code></pre><p>选择器 </p>
<pre><code>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。

HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 &quot;#&quot; 来定义。

以下的样式规则应用于元素属性 id=&quot;para1&quot;:
#para1
{
    text-align:center;
    color:red;
} </code></pre><p>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。</p>
<p>class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示：</p>
<p>在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。 </p>
<pre><code>.center {text-align:center;} </code></pre><p>另选择器有多种方式不仅限这几种  </p>
<pre><code> 接下来很重要，关于导入css的几种方法 
 插入样式表的方法有三种:

外部样式表(External style sheet) 
&lt;head&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;
&lt;/head&gt;
内部样式表(Internal style sheet) 
&lt;head&gt;
&lt;style&gt;
hr {color:sienna;}
p {margin-left:20px;}
body {background-image:url(&quot;images/back40.gif&quot;);}
&lt;/style&gt;
&lt;/head&gt;
内联样式(Inline style) 
&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt;

 内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式  

 个人认为使用内联样式表和外部引入的方式更好
</code></pre><p> 我们使用CSS样式就必续考虑到背景的问题，颜色的选择或者背景图片的设置都很基础 </p>
<pre><code> CSS 背景属性用于定义HTML元素的背景。

CSS 属性定义背景效果:

background-color 
变颜色 
十六进制 - 如：&quot;#ff0000&quot;
RGB - 如：&quot;rgb(255,0,0)&quot;
颜色名称 - 如：&quot;red&quot;
background-image 
插图片 
body {background-image:url(&apos;paper.gif&apos;);}
background-repeat 
如果图像只在水平方向平铺 (repeat-x), 页面背景会更好些

background-attachment
background-position 
 CSS 背景属性
Property    描述
background    简写属性，作用是将背景属性设置在一个声明中。
background-attachment    背景图像是否固定或者随着页面的其余部分滚动。
background-color    设置元素的背景颜色。
background-image    把图像设置为背景。
background-position    设置背景图像的起始位置。
background-repeat    设置背景图像是否及如何重复。 </code></pre><p>文本 </p>
<pre><code>所有CSS文本属性。
属性    描述
color    设置文本颜色
direction    设置文本方向。
letter-spacing    设置字符间距
line-height    设置行高
text-align    对齐元素中的文本  
文本排列属性是用来设置文本的水平对齐方式。

文本可居中或对齐到左或右,两端对齐.

当text-align设置为&quot;justify&quot;，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。
h1 {text-align:center;}
p.date {text-align:right;}
p.main {text-align:justify;}

text-decoration    向文本添加修饰 
text-decoration 属性用来设置或删除文本的装饰。
a {text-decoration:none;}
从设计的角度看 text-decoration属性主要是用来删除链接的下划线：
text-indent    缩进元素中文本的首行
text-shadow    设置文本阴影
text-transform    控制元素中的字母 
文本转换属性是用来指定在一个文本中的大写和小写字母。

可用于所有字句变成大写或小写字母，或每个单词的首字母大写。
p.uppercase {text-transform:uppercase;}
p.lowercase {text-transform:lowercase;}
p.capitalize {text-transform:capitalize;} 

unicode-bidi    设置或返回文本是否被重写 
vertical-align    设置元素的垂直对齐
white-space    设置元素中空白的处理方式
word-spacing    设置字间距 </code></pre><p>css链接样式 </p>
<pre><code>CSS 链接
不同的链接可以有不同的样式。

链接样式
链接的样式，可以用任何CSS属性（如颜色，字体，背景等）。

特别的链接，可以有不同的样式，这取决于他们是什么状态。

这四个链接状态是：

a:link - 正常，未访问过的链接
a:visited - 用户已访问过的链接
a:hover - 当用户鼠标放在链接上时
a:active - 链接被点击的那一刻
实例
a:link {color:#000000;}      /* 未访问链接*/
a:visited {color:#00FF00;}  /* 已访问链接 */
a:hover {color:#FF00FF;}  /* 鼠标移动到链接上 */
a:active {color:#0000FF;}  /* 鼠标点击时 */

尝试一下 »
当设置为若干链路状态的样式，也有一些顺序规则：

a:hover 必须跟在 a:link 和 a:visited后面
a:active 必须跟在 a:hover后面
常见的链接样式
根据上述链接的颜色变化的例子，看它是在什么状态。

让我们通过一些其他常见的方式转到链接样式：

文本修饰
text-decoration 属性主要用于删除链接中的下划线：

实例
a:link {text-decoration:none;}
a:visited {text-decoration:none;}
a:hover {text-decoration:underline;}
a:active {text-decoration:underline;}

背景颜色
背景颜色属性指定链接背景色：

实例
a:link {background-color:#B2FF99;}
a:visited {background-color:#FFFF85;}
a:hover {background-color:#FF704D;}
a:active {background-color:#FF704D;}
</code></pre><hr>
<p><a href="https://www.baidu.com/link?url=eWQuKLEHVH7k_JQZIGyj9-talXQKX-t7TinQHJlN-cFYYNK2svme0nIvIc5mbuALiT00QjfDdZyRFFxjI-nHIq&wd=&eqid=e2cfb1360000c14d000000035e9da06c" target="_blank" rel="noopener">菜鸟教程CSS</a></p>
]]></content>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2020/04/20/DOM/</url>
    <content><![CDATA[<h1 id="关于DOM"><a href="#关于DOM" class="headerlink" title="关于DOM"></a>关于DOM</h1><a id="more"></a> 
<p>什么是 DOM？<br>DOM 是 W3C（万维网联盟）的标准。</p>
<p>DOM 定义了访问 HTML 和 XML 文档的标准：</p>
<p>“W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。”<br>W3C DOM 标准被分为 3 个不同的部分：</p>
<p>核心 DOM - 针对任何结构化文档的标准模型<br>XML DOM - 针对 XML 文档的标准模型<br>HTML DOM - 针对 HTML 文档的标准模型</p>
]]></content>
  </entry>
  <entry>
    <title>admin工具测试</title>
    <url>/2020/04/18/admin%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="本文主要是Admin测试"><a href="#本文主要是Admin测试" class="headerlink" title="本文主要是Admin测试"></a>本文主要是Admin测试</h3><a id="more"></a>

<p>不需要空格 </p>
<hr>
<p>分割线 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里是代码块</span><br></pre></td></tr></table></figure>

<p><strong><em>加粗</em></strong>  </p>
<p>听说可以直接插入图片？</p>
<p><img src="http://p7.qhimg.com/bdm/384_237_0/t0198a45e705341d77c.jpg" alt></p>
<p>然而并不能  </p>
<p>还是需要感叹号正括号圆括号三部曲外加图片链接</p>
]]></content>
  </entry>
  <entry>
    <title>JAVA学习路线</title>
    <url>/2020/05/20/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<hr>
<p>title: Java学习<br>date: 2016-10-12 18:38:45<br>categories:<br>    - JAVA<br>    - 后端<br>tags:<br>    - 学习路线<br>    - 自学</p>
<hr>
<h1 id="Java学习路线"><a href="#Java学习路线" class="headerlink" title="Java学习路线"></a>Java学习路线</h1><p>编程基础之Java语言 </p>
<p>语言基础 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基础语法</span><br><span class="line">面向对象</span><br><span class="line">接口</span><br><span class="line">容器</span><br><span class="line">异常</span><br><span class="line">泛型</span><br><span class="line">反射</span><br><span class="line">注释</span><br><span class="line">IO</span><br><span class="line">图形化（Swing）</span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">JVM </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">类加载机制 </span><br><span class="line">字节码执行机制</span><br><span class="line">JVM内存模型</span><br><span class="line">GC垃圾回收</span><br><span class="line">JVM性能监控与故障定位</span><br><span class="line">JVM调优</span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">并发多线程  </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">并发编程基础</span><br><span class="line">线程池</span><br><span class="line">锁</span><br><span class="line">并发容器</span><br><span class="line">原子类</span><br><span class="line">JUC并发工具</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Web api</title>
    <url>/2020/04/25/eb-apis/</url>
    <content><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><a id="more"></a> 

<h2 id="API-和Web-api"><a href="#API-和Web-api" class="headerlink" title="API 和Web api"></a>API 和Web api</h2><hr>
<p>api就是接口、web api是操作浏览器功能和BOM和DOM </p>
<hr>
<p>浏览器功能通过BOM实现，页面元素通过DOM实现交互效果  </p>
<hr>
<p>这是MDN的API文档地址<br><a href="https://www.baidu.com/link?url=GryCIXAmZMIyHqFpzD0POVQNf2bNDb54r17--rOfhyHyXSCMQ8L4-EghsvM3TSgYtimgNUfRSfF5xgHSLCOnv_&wd=&eqid=bfa5cfe6001f39ef000000035ea41940" target="_blank" rel="noopener">MDNapi文档</a></p>
<hr>
<p>web api 一般有输入和输出（函数传参和返回值），web api很多是方法（函数）</p>
<hr>
<p>与内置对象有异曲同工之妙</p>
<hr>
<p>说出什么是DOM、<br>获取页面元素（JS）、<br>给元素注册事件（鼠标点击或者离开）、<br>操作DOM元素的属性（修改样式，修改图片地址）、<br>创建元素（JS生成）、<br>操作DOM节点、</p>
<hr>
<p>文档对象模型( Document Object Model ,简称DOM) ,是W3C组织推荐的处理可扩展标记2语言( HTML<br>或者XML )的标准编程接口。<br>W3C已经定义了-系列的DOM接口,通过这些DOM接口可以改变网页的内容、结构和样式。</p>
<hr>
<p>DOM树<br>文档:一个页面就是一个文档, DOM中使用document表示<br>元素:页面中的所有标签都是元素, DOM中使用element表示<br>节点:网页中的所有内容都是节点(标签.属性、文本.注释等) , DOM中使用node表示<br>DOM把以上内容都看做是<strong>对象</strong></p>
<hr>
<p>2.1如何获取页面元素<br>DOM在我们实际开发中主要用来操作元素。<br>我们如何来获取页面中的元素呢?<br>获取页面中的元素可以使用以下几种方式: </p>
<p>●根据ID获取<br>Document的方法getElementByTd() 返回-个匹配特定ID的元素，由于元素的ID在大部分情<br>况下要求是独一无二的,这个方法自然而然地成为了一一个高效查找特定元素的方法。<br>如果需要查找到那些没有ID的元素,你可以考虑通过CSS选择器使用querySolector().<br>语法o<br>var element = document . getElementById(id);<br>参数四<br>●element是一 个Element对象。如果当前文档中拥有特定ID的元素不存在则返回null.<br>●id是大小写敏感的字符串，代表了所要查找的元素的唯一 ID.<br>返回值o<br>返回一个匹配到ID的DOM Element对象。若在当前Document下没有找到,则返回null。<br>因为我们文档页面从上往下加载，所以先得有标签所以我们script写到标签的下面<br>参数id是大小写敏感的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var timer &#x3D; document . getElementById( &#39;time &#39;);</span><br><span class="line">console .1og(timer);  </span><br><span class="line">返回的对象</span><br><span class="line">console .dir(timer );</span><br><span class="line">打印返回的元素对象</span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">●根据标签名获取 </span><br><span class="line">~~~  </span><br><span class="line">document . getElementsByTagName(&#39;li&#39; ); </span><br><span class="line">重点 </span><br><span class="line">遍历 </span><br><span class="line">for (var i &#x3D; 0; i &lt; lis.length; i++) &#123;</span><br><span class="line">console.log(lis[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">返回的空的伪数组 </span><br><span class="line">ol是有序列表</span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">●通过HTML5新增的方法获取（ 兼容性）</span><br></pre></td></tr></table></figure>
<p>document .getEl ementsByClassName(、类名’) ; //根据类名返回元素对象集合<br>document . querySelector (‘选择器’); // 根据指定选择器返回第一个元素对象<br>var firstBox = document . querySelector( ‘ . box’）<br>document . querySelectorAll( ‘选择器’);<br>//根据指定选择器返回，与class第一种等价</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">●特殊元素获取  （body、html） </span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line">&#x2F;&#x2F; 1.获取body 元素</span><br><span class="line">var bodyEle &#x3D; document . body;</span><br><span class="line">console . log(bodyEle);</span><br><span class="line">console . dir (bodyEle);</span><br><span class="line">&#x2F;&#x2F; 2.获取html元素</span><br><span class="line">&#x2F;&#x2F; var htmlEle &#x3D; document . html;</span><br><span class="line">var htmlEle &#x3D; document . documentElement ; </span><br><span class="line">console .1og(htmlEle); </span><br><span class="line">获取body元素</span><br><span class="line">1. doucumnet.body &#x2F;&#x2F; 返回body元素对象</span><br><span class="line">获取htm|元素</span><br><span class="line">1. document . documentElement</span><br><span class="line">&#x2F;&#x2F;返回htm1元素对象</span><br></pre></td></tr></table></figure>
<p>根据标签名获取<br>还可以获取某个元素(父元素)内部所有指定标签名的子元素.<br>element . getElementsByTagName ( ‘标签名’);<br><strong>注意:父元素必须是单个对象(必须指明是哪一个元素对象). 获取的时候不包括父元素自己。</strong></p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&quot;btn&quot;&gt; 唐伯虎&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;点击一个按钮，弹出对话框</span><br><span class="line">&#x2F;&#x2F; 1.事件是有三部分组成 事件源 事件类型 事件处理程序</span><br><span class="line">我们也称为事件三要素</span><br><span class="line">&#x2F;&#x2F;(1) 事件源事件被触发的对象 谁按钮</span><br><span class="line">var btn &#x3D; document . getElementById(&#39; btn&#39; );</span><br><span class="line">&#x2F;&#x2F;(2) 事件类型 如何触发什么事件比如鼠标点击(onclick) 还是鼠标经过还是键盘按下</span><br><span class="line">&#x2F;&#x2F;(3) 事件处理程序 通过一个函数赋值的方式完成</span><br><span class="line">btn.onclick &#x3D; function() &#123;</span><br><span class="line">alert(&#39;点秋香&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;当我们点击了按钮，</span><br><span class="line">div里面的文字会发生变化</span><br><span class="line">&#x2F;&#x2F; 1.获取元素</span><br><span class="line">var btn &#x3D; document . querySelector( &#39; button&#39; );</span><br><span class="line">var div &#x3D; document . querySelector( &#39;div&#39; );</span><br><span class="line">&#x2F;&#x2F; 2.注册事件</span><br><span class="line">btn.onclick &#x3D; function() &#123;</span><br><span class="line">div. innerText &#x3D;‘2019-6-6&#39;;</span><br><span class="line">&#125;</span><br><span class="line">function getDate() &#123;</span><br><span class="line">var date &#x3D; new Date();</span><br><span class="line">&#x2F;&#x2F;console. log(date. getFullYear()); &#x2F;&#x2F;返回当前日期的年2019</span><br><span class="line">&#x2F;&#x2F;console. log(date. getMonth() + 1); &#x2F;&#x2F;月份返回的月份小1个月记得月份+1 呦</span><br><span class="line">&#x2F;&#x2F;console.1og(date. getDate()); &#x2F;&#x2F;返回的是几号</span><br><span class="line">&#x2F;&#x2F;console. log(date.getDay()); &#x2F;&#x2F; 3周一 返回的是1周六返回的是6但是周日返回的是e</span><br><span class="line">&#x2F;&#x2F;我们写一个2019年5月1日星期三</span><br><span class="line">var year &#x3D; date . getFullYear();</span><br><span class="line">var month &#x3D; date . getMonth() + 1;</span><br><span class="line">var dates &#x3D; date. getDate();</span><br><span class="line">var arr &#x3D; [&#39;星期日&#39;，&#39;星期一&#39;，&#39;星期二&#39;，&#39;星期三，&#39;星期四’，&#39;星期五’，&#39;星期六&#39;];</span><br><span class="line">var day &#x3D; date. getDay();</span><br><span class="line">return (&#39;今天是:</span><br><span class="line">+ year +</span><br><span class="line">&#39;年&#39;</span><br><span class="line">month+&#39;月&#39;+dates+&#39;日</span><br><span class="line">+ arr[day] );</span><br><span class="line"></span><br><span class="line">显示当前系统时间 </span><br><span class="line">&#x2F;&#x2F;我们无素可以不用添加事件</span><br><span class="line">var p &#x3D; document . querySelector(&#39;p&#39; );</span><br><span class="line">p.innerText &#x3D; getDate() ;|</span><br><span class="line">I</span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>// innerText 和innerHTML的区 别<br>// 1. innerText 不识别htm1标签非标准<br>去除空格和换行<br>var div = document . querySelector(‘div’);<br>// div. innerText = ‘ <strong>今天是: </strong> 2019’;<br>// 2. innerHTML 识别html标签W3C标准<br>div . innerHTML = ‘ <strong>今天是: </strong> 2019’;<br>//这两个属性是可读写的<br>可以获取元素里面的内容<br>var p = document . querySelector(‘p’ );<br>console. log(p. innerText);<br>console. log(p. innerHTML);</p>
<pre><code>
改变元素内容
element. inne rText
从起始位置到终止位置的内容,但它去除html标签，同时空格和换行也会去掉
element. inne rHTML
起始位置到终止位置的全部内容,包括html标签,同时保留空格和换行 

![](http://p2.qhimg.com/bdm/384_237_0/t01240ec15e1804c443.jpg)













</code></pre>]]></content>
  </entry>
  <entry>
    <title>vant导航条</title>
    <url>/2020/05/09/ant%E5%AF%BC%E8%88%AA%E6%9D%A1/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;index-bd&quot;&gt;</span><br><span class="line">      &lt;van-cell title&#x3D;&quot;可拖拽悬浮按钮&quot; is-link to&#x3D;&quot;&#x2F;example&#x2F;icons&quot; &#x2F;&gt;</span><br><span class="line">      &lt;van-cell title&#x3D;&quot;滚动导航&quot; is-link to&#x3D;&quot;&#x2F;example&#x2F;navbar&quot; &#x2F;&gt;</span><br><span class="line">      &lt;van-cell title&#x3D;&quot;生成海报图&quot; is-link to&#x3D;&quot;&#x2F;example&#x2F;poster&quot; &#x2F;&gt;</span><br><span class="line">      &lt;van-cell title&#x3D;&quot;返回浏览位置&quot; is-link to&#x3D;&quot;&#x2F;keepalive&#x2F;index&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  .index-bd &#123;</span><br><span class="line">    padding: 0 15px 800px;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Leetcode跳转页面</title>
    <url>/2020/04/25/eetcode%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="编程题库"><a href="#编程题库" class="headerlink" title="编程题库"></a>编程题库</h1><a id="more"></a> 

<p>如题，这是个跳转到Leet的界面 </p>
<p><a href="https://www.baidu.com/link?url=_zulnYMzklH48z_E4QUL7ldeguEIPtswoU2wmydFGEaw5WhWGkLOtglyM0eNZ9AY&wd=&eqid=fc8f818e000f21ee000000035ea3cabb" target="_blank" rel="noopener">编程题库</a></p>
]]></content>
  </entry>
  <entry>
    <title>微笑的风___wzd</title>
    <url>/2020/04/16/hello-world/</url>
    <content><![CDATA[<p>第一篇博客</p>
]]></content>
  </entry>
  <entry>
    <title>v-if和v-show</title>
    <url>/2020/05/08/if%E5%92%8Cv-show/</url>
    <content><![CDATA[<p>v-if不生成代码，v-show隐藏代码</p>
]]></content>
  </entry>
  <entry>
    <title>amap</title>
    <url>/2020/05/08/map/</url>
    <content><![CDATA[<p>vue-amap </p>
<p><a href="https://elemefe.github.io/vue-amap/#/zh-cn/introduction/install" target="_blank" rel="noopener">vueamap</a></p>
]]></content>
  </entry>
  <entry>
    <title>Home</title>
    <url>/2020/05/08/me/</url>
    <content><![CDATA[<p>代码  </p>
<a id="more"></a> 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @Author: 极客James</span><br><span class="line"> * @Motto: 求知若渴,虚心若愚</span><br><span class="line"> * @Github: https:&#x2F;&#x2F;github.com&#x2F;Geek-James&#x2F;ddBuy</span><br><span class="line"> * @掘金: https:&#x2F;&#x2F;juejin.im&#x2F;user&#x2F;5c4ebc72e51d4511dc7306ce</span><br><span class="line"> * @LastEditTime: 2020-03-13 16:43:36</span><br><span class="line"> * @Description: Home 首页模块</span><br><span class="line"> * @FilePath: &#x2F;ddBuy-dev&#x2F;src&#x2F;views&#x2F;home&#x2F;Home.vue</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;home&quot;&gt;</span><br><span class="line">    &lt;!-- 骨架屏幕  数据未加载时显示占位--&gt;</span><br><span class="line">    &lt;Skeleton v-show&#x3D;&quot;isShowLoading&quot; &#x2F;&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;!isShowLoading&quot;&gt;</span><br><span class="line">      &lt;!-- 头部地理位置和搜索框 --&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;head&quot;&gt;</span><br><span class="line">        &lt;Header&gt;&lt;&#x2F;Header&gt;</span><br><span class="line">        &lt;!-- 轮播图 --&gt;</span><br><span class="line">        &lt;Sowing :sowing_list&#x3D;&quot;sowing_list&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!-- tip --&gt;</span><br><span class="line">        &lt;Tip :home_ad&#x3D;&quot;home_ad&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!-- Nav --&gt;</span><br><span class="line">      &lt;Nav :nav_list&#x3D;&quot;nav_list&quot; &#x2F;&gt;</span><br><span class="line">      &lt;!-- 跳转到会员界面 --&gt;</span><br><span class="line">      &lt;VipTip&gt;&lt;&#x2F;VipTip&gt;</span><br><span class="line">      &lt;!-- 限时抢购 --&gt;</span><br><span class="line">      &lt;FlashBuy :flash_sale_product_list&#x3D;&quot;flash_sale_product_list&quot; &#x2F;&gt;</span><br><span class="line">      &lt;!-- 特色专区 --&gt;</span><br><span class="line">      &lt;SpecialZone :specialZone&#x3D;&quot;specialZone&quot; &#x2F;&gt;</span><br><span class="line">      &lt;!--TabbarItem 商品 --&gt;</span><br><span class="line">      &lt;TabbarGoodsItem</span><br><span class="line">        :tabbar_all_product_list&#x3D;&quot;tabbar_all_product_list&quot;</span><br><span class="line">        :flash_sale_product_list&#x3D;&quot;flash_sale_product_list&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">      &lt;!-- 最底部 --&gt;</span><br><span class="line">      &lt;van-divider&gt;&#123;&#123; $t(&#39;home.bottomTip&#39;) &#125;&#125;&lt;&#x2F;van-divider&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 数据加载提示gif 骨架屏代替--&gt;</span><br><span class="line">    &lt;!-- &lt;Loading :show&#x3D;&quot;isShowLoading&quot; &#x2F;&gt; --&gt;</span><br><span class="line">    &lt;!-- 回到顶部按钮 --&gt;</span><br><span class="line">    &lt;v-top &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">import &#123; getHomeData &#125; from &#39;.&#x2F;..&#x2F;..&#x2F;serve&#x2F;api&#x2F;index.js&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入Vuex</span><br><span class="line">import &#123; mapMutations, mapState &#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">import &#123; ADD_TO_CART &#125; from &#39;.&#x2F;..&#x2F;..&#x2F;config&#x2F;pubsub_type.js&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入页面组件</span><br><span class="line">import Header from &#39;.&#x2F;components&#x2F;header&#x2F;Header&#39;</span><br><span class="line">import Sowing from &#39;.&#x2F;components&#x2F;sowing&#x2F;Sowing&#39;</span><br><span class="line">import Tip from &#39;.&#x2F;components&#x2F;tip&#x2F;Tip&#39;</span><br><span class="line">import Nav from &#39;.&#x2F;components&#x2F;nav&#x2F;Nav&#39;</span><br><span class="line">import VipTip from &#39;.&#x2F;components&#x2F;myVip&#x2F;VipTip&#39;</span><br><span class="line">import FlashBuy from &#39;.&#x2F;components&#x2F;flash&#x2F;FlashBuy&#39;</span><br><span class="line">import SpecialZone from &#39;.&#x2F;components&#x2F;special&#x2F;SpecialZone&#39;</span><br><span class="line">import TabbarGoodsItem from &#39;.&#x2F;components&#x2F;tabbar&#x2F;TabbarGoodsItem&#39;</span><br><span class="line">import Loading from &#39;..&#x2F;..&#x2F;components&#x2F;loading&#x2F;LoadingGif&#39;</span><br><span class="line">import Skeleton from &#39;..&#x2F;home&#x2F;components&#x2F;skeleton&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#39;userInfo&#39;])</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    &#x2F;&#x2F; 0.数据初始化</span><br><span class="line">    this._initData()</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      sowing_list: [], &#x2F;&#x2F; 首页轮播图数据</span><br><span class="line">      isShowLoading: true, &#x2F;&#x2F; 是否加载动画</span><br><span class="line">      nav_list: [],</span><br><span class="line">      flash_sale_product_list: [], &#x2F;&#x2F; 限时抢购</span><br><span class="line">      tabbar_all_product_list: [],</span><br><span class="line">      specialZone: &#123;&#125;, &#x2F;&#x2F; 特色专区数据</span><br><span class="line">      home_ad: &#39;&#39; &#x2F;&#x2F; 首页广告</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    Sowing,</span><br><span class="line">    Tip,</span><br><span class="line">    Nav,</span><br><span class="line">    VipTip,</span><br><span class="line">    FlashBuy,</span><br><span class="line">    SpecialZone,</span><br><span class="line">    TabbarGoodsItem,</span><br><span class="line">    Loading,</span><br><span class="line">    Skeleton</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; Vuex中的方法</span><br><span class="line">    ...mapMutations([&#39;ADD_GOODS&#39;, &#39;ADD_TO_CART&#39;]),</span><br><span class="line">    &#x2F;&#x2F; 数据初始化</span><br><span class="line">    async _initData() &#123;</span><br><span class="line">      const response &#x3D; await getHomeData()</span><br><span class="line">      if (response.success) &#123;</span><br><span class="line">        const data &#x3D; response.data</span><br><span class="line">        &#x2F;&#x2F; 给轮播组件 sowing_list赋值</span><br><span class="line">        this.sowing_list &#x3D; data.list[0].icon_list</span><br><span class="line">        &#x2F;&#x2F; navList 赋值</span><br><span class="line">        this.nav_list &#x3D; data.list[2].icon_list</span><br><span class="line">        &#x2F;&#x2F; 给限时抢购赋值</span><br><span class="line">        this.flash_sale_product_list &#x3D; data.list[3].product_list</span><br><span class="line">        &#x2F;&#x2F; 给Tabbar 商品列表赋值</span><br><span class="line">        this.tabbar_all_product_list &#x3D; data.list[12].product_list</span><br><span class="line">        this.isShowLoading &#x3D; false</span><br><span class="line">        &#x2F;&#x2F; 给特色专区赋值</span><br><span class="line">        this.specialZone &#x3D; data.special_zone</span><br><span class="line">        &#x2F;&#x2F; 获取首页广告图</span><br><span class="line">        this.home_ad &#x3D; data.home_ad.image_url</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot; scoped&gt;</span><br><span class="line">#home &#123;</span><br><span class="line">  background-color: &#39;#f5f5f5&#39;;</span><br><span class="line">  padding-bottom: 3rem;</span><br><span class="line">  .head &#123;</span><br><span class="line">    margin-top: -3rem;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-image: url(&#39;http:&#x2F;&#x2F;518taole.7-orange.cn&#x2F;backImage.png&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.van-divider &#123;</span><br><span class="line">  background-color: #f5f5f5;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>merkle在线验证工具</title>
    <url>/2020/04/29/merkle%E5%9C%A8%E7%BA%BF%E9%AA%8C%E8%AF%81%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="验证工具"><a href="#验证工具" class="headerlink" title="验证工具"></a>验证工具</h2><p>[验证工具]（<a href="https://github.com/alsenet-labs/merklizer）" target="_blank" rel="noopener">https://github.com/alsenet-labs/merklizer）</a> </p>
]]></content>
  </entry>
  <entry>
    <title>merkle桥</title>
    <url>/2020/05/06/merkle%E6%A1%A5/</url>
    <content><![CDATA[<h1 id="merkle桥"><a href="#merkle桥" class="headerlink" title="merkle桥"></a>merkle桥</h1><a id="more"></a>  
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>Merkle Bridge is a method to verify asset status securely using Merkle proof between two different blockchain networks. Merkle Bridge DApp makes it easy to move assets between Merkle Bridges via the Web UI. </p>
<pre><code>Merkle Bridge是一种在两个不同的区块链网络之间使用Merkle证明安全地验证资产状态的方法。 Merkle Bridge DApp使通过Web UI在Merkle Bridges之间移动资产变得容易。 </code></pre><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>To service this, you’ll first need an implementation of Merkle Bridge. See the following link to perform Merkle verification between the two networks.</p>
<p>Between Aergo to Ethereum: <a href="https://github.com/aergoio/eth-merkle-bridge" target="_blank" rel="noopener">https://github.com/aergoio/eth-merkle-bridge</a><br>Between Aergo to Aergo: <a href="https://github.com/aergoio/merkle-bridge" target="_blank" rel="noopener">https://github.com/aergoio/merkle-bridge</a><br>Currently, the Aergo Foundation operates the Merkle proof service between Ethereum ropsten and Aergo Testnet. </p>
<pre><code>为此，您首先需要实现Merkle Bridge。请参阅以下链接在两个网络之间执行Merkle验证。

在Aergo与以太坊之间：https : //github.com/aergoio/eth-merkle-bridge
在Aergo与Aergo之间：https：//github.com/aergoio/merkle-bridge
目前，Aergo基金会在以太坊ropsten和Aergo Testnet之间运行Merkle证明服务。</code></pre><h1 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h1><h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><p>yarn install </p>
<h2 id="编译和热重载"><a href="#编译和热重载" class="headerlink" title="编译和热重载"></a>编译和热重载</h2><p>yarn run serve </p>
<h2 id="编译和创建"><a href="#编译和创建" class="headerlink" title="编译和创建"></a>编译和创建</h2><p>yarn build </p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>lang-less</title>
    <url>/2020/05/08/ng-less/</url>
    <content><![CDATA[<h1 id="style"><a href="#style" class="headerlink" title="style"></a>style</h1><a id="more"></a> 

<pre><code>&lt;style lang=&quot;less&quot; scoped&gt;  
</code></pre><p>css预处理器</p>
]]></content>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/2020/04/26/ode-js/</url>
    <content><![CDATA[<p>如题 </p>
<a id="more"></a> 



<ul>
<li>Node.js 是什么<ul>
<li>JavaScript 运行时</li>
<li>既不是语言，也不是框架，它是一个平台</li>
</ul>
</li>
<li>Node.js 中的 JavaScript<ul>
<li>没有 BOM、DOM</li>
<li>EcmaScript 基本的 JavaScript 语言部分</li>
<li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul>
<li>文件操作的能力</li>
<li>http 服务的能力</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>Node 中的 JavaScript</p>
<ul>
<li>EcmaScript<ul>
<li>变量</li>
<li>方法</li>
<li>数据类型</li>
<li>内置对象</li>
<li>Array</li>
<li>Object</li>
<li>Date</li>
<li>Math</li>
</ul>
</li>
<li>模块系统<ul>
<li>在 Node 中没有全局作用域的概念</li>
<li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li>
<li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul>
<li>模块完全是封闭的</li>
<li>外部无法访问内部</li>
<li>内部也无法访问外部</li>
</ul>
</li>
<li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li>
<li>但是某些情况下，模块与模块是需要进行通信的</li>
<li>在每个模块中，都提供了一个对象：<code>exports</code></li>
<li>该对象默认是一个空对象</li>
<li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li>
<li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li>
<li>还有其它的一些规则，具体后面讲，以及如何在项目中去使用这种编程方式，会通过后面的案例来处理</li>
</ul>
</li>
<li>核心模块<ul>
<li>核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如<ul>
<li>fs 文件操作模块</li>
<li>http 网络服务构建模块</li>
<li>os 操作系统信息模块</li>
<li>path 路径处理模块</li>
<li>。。。。</li>
</ul>
</li>
<li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul>
<li><code>var fs = require(&#39;fs&#39;)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>http</p>
<ul>
<li>require</li>
<li>端口号<ul>
<li>ip 地址定位计算机</li>
<li>端口号定位具体的应用程序</li>
</ul>
</li>
<li>Content-Type<ul>
<li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li>
<li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li>
<li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li>
</ul>
</li>
<li>通过网络发送文件<ul>
<li>发送的并不是文件，本质上来讲发送是文件的内容</li>
<li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</li>
</ul>
</li>
</ul>
</li>
<li><p>模块系统</p>
</li>
<li><p>Node 中的其它的核心模块</p>
</li>
<li><p>做一个小管理系统：</p>
<ul>
<li>CRUD</li>
</ul>
</li>
<li><p>Express Web 开发框架</p>
<ul>
<li><code>npm install express</code></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>active</title>
    <url>/2020/05/09/tive/</url>
    <content><![CDATA[<p>疑问：active是什么</p>
]]></content>
  </entry>
  <entry>
    <title>pow实现</title>
    <url>/2020/04/29/pow%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="pow实现"><a href="#pow实现" class="headerlink" title="pow实现"></a>pow实现</h1><a id="more"></a>
<p><del>~</del><br>package main</p>
<p>import (<br>    “crypto/sha256”<br>    “encoding/hex”<br>    “fmt”<br>    _ “log”<br>    “strconv”<br>    “strings”<br>    “sync”<br>    “time”<br>)</p>
<p>const difficulty =4<br>type Block struct {<br>    Index int<br>    Timestamp string<br>    BMP int<br>    HashCode string<br>    PreHash string<br>    Diff  int<br>    Nonce int</p>
<p>}<br>//用数组去维护区块链<br>var Blockchain_ []Block<br>var mutex =&amp;sync.Mutex {}<br>//生成区块<br>func generateBlock(oldBlock Block, BMP int) Block {<br>    var newBlock Block<br>    newBlock.PreHash = oldBlock. HashCode<br>    newBlock.Timestamp=time.Now().String()<br>    newBlock.Index =oldBlock.Index + 1<br>    newBlock.BMP =BMP<br>    newBlock.Diff =difficulty<br>    for i:=0;;i++{<br>        newBlock.Nonce++<br>        hash :=calculateHash(newBlock)<br>        fmt.Println(hash)<br>        if isHashValid(hash,difficulty) {<br>            fmt.Println(“挖矿成功”)<br>            newBlock.HashCode =hash<br>            return newBlock</p>
<pre><code>    }
}

return Block{}</code></pre><p>}<br>func calculateHash(block Block)string{<br>    record := strconv.Itoa(block.Index)+ block.Timestamp+strconv.Itoa(block.Nonce)+strconv.Itoa(block.BMP)+block.PreHash<br>    sha := sha256.New()<br>    sha.Write([]byte(record))<br>    hashed := sha.Sum(nil)<br>    return hex.EncodeToString(hashed)</p>
<p>}</p>
<p>func isHashValid(hash string,difficulty int )bool{</p>
<pre><code>prefix_ := strings.Repeat(&quot;0&quot;, difficulty)
return strings.HasPrefix(hash,prefix_)</code></pre><p>}<br>func main()  {<br>    var firstBlock Block<br>    firstBlock.Diff=4<br>    firstBlock.Nonce =0<br>    firstBlock.PreHash =”0”<br>    firstBlock.BMP =1<br>    firstBlock.Index =0<br>    firstBlock.HashCode =”0”<br>    generateBlock(firstBlock,1)<br>}</p>
]]></content>
  </entry>
  <entry>
    <title>vue入门</title>
    <url>/2020/04/20/vue%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="有关MVVM的一些理解"><a href="#有关MVVM的一些理解" class="headerlink" title="有关MVVM的一些理解"></a>有关MVVM的一些理解</h1><a id="more"></a>  

<p>传统的MVC模式指的是<br>浏览器需要先把请求发给路由<br>路由调用控制器<br>控制器去拿数据<br>之后把结果返回给前端，重新渲染界面<br>视图层就是交互层，模型层就是业务逻辑  </p>
<p>现在流行的动态绑定数据就是MVVM </p>
<p>指令是带有 v- 前缀的特殊属性。</p>
<p>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。如下例子：</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
new Vue({
  el: &apos;#app&apos;,
  data: {
    seen: true
  }
})
&lt;/script&gt;

当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。</code></pre>]]></content>
  </entry>
  <entry>
    <title>Vue_Router</title>
    <url>/2020/04/29/ue-Router/</url>
    <content><![CDATA[<p>路由</p>
<a id="more"></a> 

<p>路由是个网络工程里面的术语。<br>路由( routing )就是通过互联的网络把信息从源地址传输到目的地址的活动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在生活中,我们有没有听说过路由的概念呢?当然了,路由器嘛.</span><br><span class="line">路由器是做什么的?你有想过吗?</span><br><span class="line">路由器提供了两种机制:路由和转送.</span><br><span class="line">路由是决定数据包从来源到目的地的路径.</span><br><span class="line">转送将输入端的数据转移到合适的输出端.</span><br><span class="line">路由中有一个非常重要的概念叫路由表.</span><br><span class="line">路由表本质上就是-个映射表,决定了数据包的指向. </span><br><span class="line">~~~ </span><br><span class="line">前端渲染和后端渲染 </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">后端处理映射关系——后端路由 </span><br><span class="line"></span><br><span class="line">后端路由阶段</span><br><span class="line">早期的网站开发整个HTML页面是由服务器来渲染的.</span><br><span class="line">服务器直接生产渲染好对应的HTML页面,返回给客户端进行展示.</span><br><span class="line">但是,一个网站,这么多页面服务器如何处理呢?</span><br><span class="line">一个页面有自己对应的网址,也就是URL.</span><br><span class="line"> URL会发送到服务器,服务器会通过正则对该URL进行匹配,并且最后交给一个Controller进行处理.</span><br><span class="line">Controller进行各种处理,最终生成HTML或者数据,返回给前端.</span><br><span class="line">这就完成了一个IO操作.</span><br><span class="line">上面的这种操作,就是后端路由.</span><br><span class="line">当我们页面中需要请求不同的路径内容时,交给服务器来进行处理,服务器渲染好整个页面,并且将页面返回给客户顿.</span><br><span class="line">这种情况下渲染好的页面,不需要单独加载任何的js和css,可以直接交给浏览器展示，这样也有利于SEO的优化.</span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">前端渲染 </span><br><span class="line">~~~ </span><br><span class="line">前端路由阶段</span><br><span class="line">前后端分离阶段:</span><br><span class="line">随着Ajax的出现,有了前后端分离的开发模式.</span><br><span class="line">后端只提供API来返回数据,前端通过Ajax获取数据,并且可以通过JavaScript将数据渲染到页面中.</span><br><span class="line">这样做最大的优点就是前后端责任的清晰,后端专注于数据上,前端专注于交互和可视化上.</span><br><span class="line">并且当移动端(iOS&#x2F;Android)出现后，后端不需要进行任何处理,依然使用之前的一套API即可.</span><br><span class="line">目前很多的网站依然采用这种模式开发.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是个人理解： </span><br><span class="line"></span><br><span class="line">主要是用来进行资源定位，区别于后端。 </span><br><span class="line">[cdn](https:&#x2F;&#x2F;www.baidu.com&#x2F;link?url&#x3D;-TZZRFBFc_FFPtnXT2wRlON8D6iPkmT2AoyTWTke05swLRPzR49hnVQ7GY9dluz1&amp;wd&#x3D;&amp;eqid&#x3D;d0f5468b0005b5d6000000035ea8b5fe)</span><br></pre></td></tr></table></figure>
<p>定义路由规则（数组），vue不知道这数组是路由规则，所以需要传参。将路由规则挂载到vue上。（嵌套规则需要记） </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传参 </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">静态变动态</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV11x411J7pg?from=search&seid=2927631171341711551" target="_blank" rel="noopener">导航</a></p>
]]></content>
  </entry>
  <entry>
    <title>vue复习</title>
    <url>/2020/04/29/vue%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>1、什么是VUE  </p>
<a id="more"></a>

<p>MVVM渐进式框架 </p>
<p>2、引入VUE.js库、创建实例 、HTML导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例化VUE</span><br><span class="line">sss </span><br><span class="line">s n e d s </span><br><span class="line"></span><br><span class="line">di id &#123;&#123;&#125;&#125; di</span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">--- </span><br><span class="line">3、数据绑定使用&#123;&#123;&#125;&#125; 或者V-text &#x2F;文本渲染指令&#x2F;文本语法</span><br><span class="line">~~~ </span><br><span class="line">span  &#123;&#123;&#125;&#125;  sapan </span><br><span class="line"></span><br><span class="line">span v-tx  &#x3D;   s </span><br><span class="line">双大括号会把html代码解释为普通文本</span><br><span class="line">为输真H，V-html</span><br><span class="line">~~~  </span><br><span class="line">属绑 </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">v-bind </span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">4、条件渲染 </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">v-if </span><br><span class="line">常用于登录组件</span><br><span class="line">v-show </span><br><span class="line">调整display属性，DOM已经加载，只是没有显示 </span><br><span class="line">vif判断是否加载，可以减轻服务器压力，v-show更流畅</span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">5、列表渲染 </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">Vfor列表渲染，数组 </span><br><span class="line">对象循环输出，列表渲染索引 </span><br><span class="line">key,为了让vue更好的跟踪每个节点的身份</span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">6、表单绑定</span><br></pre></td></tr></table></figure>
<p>vm在表单input,textarea,select上创建双向数据绑定，它会根据控件类型自动选择正确方法更新元素</p>
<p>表单和数据创建双绑 </p>
<p>lazy，可以在change后更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事件绑定 -监听 </span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">监听事件</span><br><span class="line">可以用v-on指令监听DOM事件,并在触发时运行-些JavaScript代码。</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;button. v-on:click&#x3D; &quot;counter. +&#x3D; 1°&gt;加1&lt;&#x2F;button&gt;</span><br><span class="line">&lt;p&gt;按钮被点击了[&#123;&#123; counter &#125;&#125;次.&lt;&#x2F;p&gt; </span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var example1 . new Vue( 汇</span><br><span class="line">el :</span><br><span class="line">&quot;单ap&#39;</span><br><span class="line">data: &#123;</span><br><span class="line">counter : 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">事件处理方法</span><br></pre></td></tr></table></figure>

<p>事件处理方法</p>
<div id="app">
<button v-on:clicke" greet">问候</button>
</div>
<script>
var app . new Vue({
el:。#app
data: {
name: 'Vue. js'
methods: {
greet: function(event) {
// 'this'. 在方法里指向当前Vue实例
alert( '你好+this. name+'!') ;
1/ 'even' 是元生DOM事件
iflevent ) {
alert(event. target. tagName )
}
}
})
//也可以用JavaScript 直接调用
app.greet( ) :
</script>
事件绑定简写方式
<button :click="greet">问候</button>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事件修饰符 </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">在事件处理程序中调用event.preventDefault( 或event.stopPropagation0是非常常见的需</span><br><span class="line">求</span><br><span class="line">为了解决这个问题, Vue.js 为v-on提供了事件修饰符。之前提过,修饰符是由点开头的指令</span><br><span class="line">后缀来表示的。</span><br><span class="line">。.stop</span><br><span class="line">， .prevent</span><br><span class="line">. .once</span><br><span class="line">&lt;!--</span><br><span class="line">阻止单击事件继续传播</span><br><span class="line">&lt;a v-on:click. stop&#x3D;&quot;doThis *&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;1--提交事件不再重载页面</span><br><span class="line">&lt;form v-on:submit .prevent&#x3D;”onSubmit&quot;&gt;&lt;&#x2F; form&gt;</span><br><span class="line">&lt;! --</span><br><span class="line">修饰符可以串联- -&gt;</span><br><span class="line">&lt;a v-on:click. stop.prevent&#x3D; &quot;doThat &quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!--点击事件将只会触发一次- -&gt;</span><br><span class="line">&lt;a v-on:click. once&#x3D; &quot;doThis&quot;&gt;&lt;&#x2F; a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">按键修饰符 </span><br><span class="line">~~~ </span><br><span class="line">div class&#x3D; &quot;explain&#39;&gt;</span><br><span class="line">在监听键盘事件时,我们经常需要检查详细的按键。Vue允许为v-on在监听键盘事件时添加</span><br><span class="line">按键修饰符:</span><br><span class="line">&lt;1--只有在、 key&#39;是、Enter’时调用、 vm. submit()”--&gt;</span><br><span class="line">&lt;input v-on:keyup. enter&#x3D;&quot; submit&quot; &gt;</span><br><span class="line">&lt;input v-on: keyup.page -down&#x3D;”onPageDown &#39;&gt;</span><br><span class="line">按键码</span><br><span class="line">使用keyCode特性也是允许的:</span><br><span class="line">&lt;input v-on:keyup.13-&quot; submit&#39;&gt;</span><br><span class="line">Vue提供了绝大多数常用的按键码的别名:</span><br><span class="line">●.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获&quot;删除&quot;和”退格“键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.down</span><br><span class="line">.Jeft</span><br><span class="line">.right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">计算与监听  </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">计算属性</span><br><span class="line">模板内的表达式非常便利,但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻</span><br><span class="line">辑会让模板过重且难以维护。例如:</span><br><span class="line">&lt;div id&#x3D;&#39;example&quot;&gt;</span><br><span class="line">&#123;&#123;msg.split(&quot;&quot;).reverse(). join(&quot;&quot;) &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">, 这里是想要显示变量msg的翻转字符串。当你想要在模板中多次引用此处的翻转字符串</span><br><span class="line">时,就会更加难以处理。</span><br><span class="line">当你需要从现有数组得到新的数据这个时候你就需要计算了computed</span><br><span class="line">&lt;div id&#x3D;&#39;example&quot;&gt;</span><br><span class="line">&lt;p&gt;原来的信息: &quot;&#123;&#123; msg &#125;&#125;*&lt;&#x2F;p&gt; </span><br><span class="line">&lt;p&gt;计算翻转的信息: &quot;&#123;&#123; rmsg 1&#125;*&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var vm。new Vue(&#123;</span><br><span class="line">e1: &#39; #example&#39;,</span><br><span class="line">data: t</span><br><span class="line">msg:</span><br><span class="line">&#39;He1l1o&#39;</span><br><span class="line">computed: C.</span><br><span class="line">&#x2F;&#x2F;计算属性的getter</span><br><span class="line">rmsg: function () &#123;</span><br><span class="line">&#x2F;&#x2F;、this指向vm实例</span><br><span class="line">return this.msg.split(&#39;&#39;).reverse(). join(&#39;&#39;)</span><br><span class="line">结果:</span><br><span class="line">原来的信息: &quot;hello&quot;</span><br><span class="line">计算翻转的信息: &quot;olleh&quot; </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">侦听器</span><br></pre></td></tr></table></figure>

<p>Vue通过watch来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时,这<br>个方式是最有用的。</p>
<div id=" app">
<p>计数器: [{ num }}</p>
<button click="num++">点我</button></div>
<script>
var vm。new Vue({
el: ' #app'.
data:{num:1}，
watch: {
'num': function(nval. oval) {
console. log( 'num变化: + oval +，变为。+ nval + '1');
}.
})
</script>
每次点击按钮都会输出:
num变化:1变为2!
num变化:2变为3!


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象变化的监听</span><br></pre></td></tr></table></figure>
<p>我们需要监听对象的属性值是否发生改变用</p>
<div id="app'>
<p>
计数器: </p> 
<button click= " num. age++“>点我</div>
<script>
varvm=newVue({
el: ' #app'.
data: {
num: {age:1}
}。
watch: {
num': {
handler: function(nval, oval) {
console.1og( ' num变化:” + oval.age +”变为”+
nval.age + '!')
deep: true
}):
</script> 
deep属性深度监听对象变化



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自定义指令</span><br></pre></td></tr></table></figure>
<p>除了默认设置的核心指令( v-model和v-show ), Vue也允许注册自定义指令。下面我们注册<br>一个全局指令v-focus, 该指令的功能是在页面加载时,元素获得焦点</p>
<div id="°app"">
<p>
页面载入时, input元素自动获取焦点: </p>
<input v- focuse""></div>
<script>
11创建根实例
new Vue({
el: ' #app'
directives: {
//注册一个局部的自定义指令v- focus
focus: {
//指令的定义
inserted: function (el) {
//聚焦元素
el. focus( )
}
})
</script>
一个指令定义对象可以提供如下几个钩子函数(均为可选) :
bind:只调用一次，指令第一次绑定到元素时调用。在这里可以进行-次性的初始化设
置。
inserted :被绑定元素插入父节点时调用(仅保证父节点存在,但不一定已被插入文档
中)。
update :所在组件的VNode更新时调用,但是可能发生在其子VNode更新之前。指令的
值可能发生了改变,也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板
更新


<p>指令的值数据-简写<br>p&gt;在很多时候,你可能想在bind和update时触发相同行为,而不关心其它的钩子</p>
<div id=" app">
<p>页面载入时，input元素自动获取焦点:</p>
<input v- focusa" true ">
</div>
<script>
11创建根实例
new Vue( {
el: ' #app'.
directives :
//注册一个局部的自定义指令v- focus
focus: function (e1,data) {
//聚焦元素
//如果指令的值是t rue则获取焦点
if(data. value==true ) {
el. focus( )
}
}
})
</script>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">类与样式  </span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">类的绑定</span><br><span class="line">操作元素的class 列表和内联样式是数据绑定的- -个常见需求。因为它们都是属性,所以我</span><br><span class="line">们可以用v-bind处理它们</span><br><span class="line">Vue.js v-bind在处理class和style时。专门增强了它。表达式的结果类型除了字符串之</span><br><span class="line">外,还可以是对象或数组。</span><br><span class="line">我们可以传给v-bind:class一个对象,以动态地切换class :</span><br><span class="line">&lt;div v-bind:class&#x3D;&quot; &#123; active: isActive &#125; &quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">上面的语法表示active 这个class存在与否将取决于数据属性isActive的真假</span><br><span class="line"></span><br><span class="line">绑定多个class</span><br><span class="line">p&gt;你可以在对象中传入更多属性来动态切换多个class</span><br><span class="line">&lt;div class&#x3D;&quot; static&quot; v-bind:class&#x3D;&quot; &#123; active: isActive. &#39; text -</span><br><span class="line">danger&#39;: hasError &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">data如下</span><br><span class="line">data:</span><br><span class="line">isActive: true ，</span><br><span class="line">hasError: false</span><br><span class="line">渲染结果为</span><br><span class="line">&lt;div class&#x3D;&quot;static active&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">对象绑定</span><br><span class="line">绑定的数据对象不必内联定义在模板里:</span><br><span class="line">&lt;div v-bind:class&#x3D;&quot;classObject &quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">数据如下</span><br><span class="line">data: &#123;</span><br><span class="line">classObject: &#123;</span><br><span class="line">active: true 。</span><br><span class="line">&#39; text-danger&#39; : false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">classObject对象可以通过计算动态获得</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>vue开发网易云播放器</title>
    <url>/2020/04/20/vue%E5%BC%80%E5%8F%91%E7%BD%91%E6%98%93%E4%BA%91%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h1 id="vue开发网易云"><a href="#vue开发网易云" class="headerlink" title="vue开发网易云"></a>vue开发网易云</h1><a id="more"></a> 
<h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>快速原型  </p>
<p>VUE-router  </p>
<p>vue-cli  </p>
<p>element-ui </p>
<p>HTML </p>
<p>css</p>
<p>js  </p>
<p>ajax </p>
<p>vue  </p>
<p>axios  </p>
<p>VScode插件 </p>
<p><img src="/.com//%5Cimages%5Cpasted-3.png" alt="upload successful">  </p>
<p>ES6 </p>
<p>let  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">和var关键字的用法基本一致</span><br><span class="line">没有变量提升（可规避诸多问题）</span><br><span class="line">let x &#x3D; 单引号 </span><br><span class="line">console .1og(food)输出food </span><br><span class="line">如果用 var 不会报错，但先使用，后声明 </span><br><span class="line">let 先声明，再使用，否则会报错</span><br></pre></td></tr></table></figure>


<p>模板字符串  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用&quot;&quot;包裹文本（反引号）</span><br><span class="line">在需要替换的位置使用$&#123;&#125;占位， 并填入内容即可</span><br><span class="line">&#x2F;&#x2F;使用、</span><br><span class="line">包裹文本1的左边</span><br><span class="line">&#x2F;&#x2F;在需要替换的位置使用$&#123;&#125; 占位，并填入内容即可</span><br><span class="line">let name &#x3D;&quot;花姐&quot;</span><br><span class="line">let food &#x3D;&quot;西兰花”</span><br><span class="line">let city &#x3D;&quot;深圳&quot; </span><br><span class="line">let temStr &#x3D;、 我的名字是: $&#123;name&#125; 我喜欢的东西是: $&#123;food&#125;我所在的城市是:$&#123;city&#125;</span><br><span class="line">console .1og(temStr )</span><br></pre></td></tr></table></figure>
<p>对象简化赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果属性名和变量名相同，可以简写 </span><br><span class="line">方法可以省略 fuction等关键字 </span><br><span class="line"></span><br><span class="line">let name &#x3D;&quot;小黑</span><br><span class="line">let city &#x3D;&quot;深圳&quot;</span><br><span class="line">let person &#x3D;&#123; </span><br><span class="line">&#x2F;*name : *&#x2F;name，</span><br><span class="line">&#x2F;*city :*&#x2F;city</span><br><span class="line">&#125;</span><br><span class="line">console .1og(person) </span><br><span class="line"></span><br><span class="line">sayHello: function()&#123;</span><br><span class="line">console. log( &#39;你好吗! &#39;) </span><br><span class="line">&#125;</span><br><span class="line">console .1og(person) </span><br><span class="line">person . sayHe11o( )</span><br><span class="line">上边可以改成sayhello()&#123;consol.log()&#125;</span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">箭头函数化简</span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">function省略掉，替换为&#x3D;&gt;</span><br><span class="line">参数只有一个时，可以省略( )</span><br><span class="line">函数体只有一行时，可以省略&#123; &#125;</span><br><span class="line">函数体只有一行,并且有返回值时，如果省略了&#123;),必须省略return </span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line">箭头函数this</span><br></pre></td></tr></table></figure>
<dl><dt>创建时的this是谁，运行的时候this就是谁<br>let person =<br>name :</dt><dd>“花姐”<br>food: ‘西兰花’<br>sayHi(){<br>// console.log(this)<br>setTimeout( function(){<br>console. log(this)<br>}; 100)</dd></dl><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">简化播放器  </span><br><span class="line">1、挂载</span><br><span class="line">2、双向数据绑定 </span><br><span class="line">~~~ </span><br><span class="line">&#x2F;*</span><br><span class="line">需求:</span><br><span class="line">1.回车搜歌</span><br><span class="line">接口1:歌曲搜索</span><br><span class="line">地址: https :&#x2F;&#x2F; autumnfish . cn&#x2F;search</span><br><span class="line">方法:get</span><br><span class="line">参数:keywords搜 索关键字</span><br><span class="line">2.列表渲染</span><br><span class="line">3.</span><br><span class="line">点击播放</span><br><span class="line">接口2:获取歌曲播放地址</span><br><span class="line">地址:https :&#x2F;&#x2F; autumnfish . cn&#x2F; song&#x2F;url </span><br><span class="line">方法:get</span><br><span class="line">参数:id歌 曲id</span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">APP.vue </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;top &#x2F;&gt;</span><br><span class="line">    &lt;index &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import top from &#39;.&#x2F;components&#x2F;01.top.vue&#39;; </span><br><span class="line">  &#x2F;&#x2F;导入这个组件，并注册</span><br><span class="line">import index from &#39;.&#x2F;components&#x2F;02.index.vue&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;app&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    top,</span><br><span class="line">    index</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">01top.vue </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;top-container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left-box&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;icon-wrapper&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;iconfont icon-home&quot; @click&#x3D;&quot;toHomeClick()&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;!-- &lt;span class&#x3D;&quot;iconfont icon-sami-select&quot;&gt;&lt;&#x2F;span&gt; --&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;iconfont icon-full-screen&quot; @click&#x3D;&quot;getFullCreeen(btnStatus)&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!-- &lt;div class&#x3D;&quot;history-wrapper&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;iconfont icon-arrow-lift&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;iconfont icon-arrow-right&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt; --&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right-box&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;el-input el-input--small el-input--prefix&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; autocomplete&#x3D;&quot;off&quot; placeholder&#x3D;&quot;搜索&quot; v-model&#x3D;&quot;inputVal&quot; @keyup.enter&#x3D;&quot;toResult&quot; class&#x3D;&quot;el-input__inner&quot; &#x2F;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;el-input__prefix&quot;&gt;</span><br><span class="line">          &lt;i class&#x3D;&quot;el-input__icon el-icon-search&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;top&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      query: &#39;&#39;,</span><br><span class="line">      inputVal: &#39;&#39;,</span><br><span class="line">      n: 0,</span><br><span class="line">      btnStatus: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toResult() &#123;</span><br><span class="line">      if (this.inputVal &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        &#x2F;&#x2F; 提示用户</span><br><span class="line">        this.$message.warning(&#39;请输入内容!&#39;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 携带数据去搜索页面</span><br><span class="line">        this.$router.push(&#96;&#x2F;result?q&#x3D;$&#123;this.inputVal&#125;&#96;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    toHomeClick() &#123;</span><br><span class="line">      if (&#39;&#x2F;discovery&#39; &#x3D;&#x3D;&#x3D; this.$route.path) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      this.$router.push(&#96;&#x2F;discovery&#96;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;  点击实现全屏和退出全屏</span><br><span class="line">    getFullCreeen(btnStatus) &#123;</span><br><span class="line">      this.btnStatus &#x3D; this.btnStatus &#x3D;&#x3D;&#x3D; 0 ? 1 : 0</span><br><span class="line">      this.n++</span><br><span class="line">      this.n % 2 &#x3D;&#x3D; 0 ? this.outFullCreeen(document) : this.inFullCreeen(document.documentElement)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    inFullCreeen(element) &#123;</span><br><span class="line">      let el &#x3D; element</span><br><span class="line">      let rfs &#x3D; el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen</span><br><span class="line">      if (typeof rfs !&#x3D; &#39;undefined&#39; &amp;&amp; rfs) &#123;</span><br><span class="line">        rfs.call(el)</span><br><span class="line">      &#125; else if (typeof window.ActiveXObject !&#x3D; &#39;undefined&#39;) &#123;</span><br><span class="line">        let wscript &#x3D; new ActiveXObject(&#39;WScript.Shell&#39;)</span><br><span class="line">        if (wscript !&#x3D; null) &#123;</span><br><span class="line">          wscript.SendKeys(&#39;&#123;F11&#125;&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    outFullCreeen(element) &#123;</span><br><span class="line">      let el &#x3D; element</span><br><span class="line">      let cfs &#x3D; el.cancelFullScreen || el.webkitCancelFullScreen || el.mozCancelFullScreen || el.exitFullScreen</span><br><span class="line">      if (typeof cfs !&#x3D; &#39;undefined&#39; &amp;&amp; cfs) &#123;</span><br><span class="line">        cfs.call(el)</span><br><span class="line">      &#125; else if (typeof window.ActiveXObject !&#x3D; &#39;undefined&#39;) &#123;</span><br><span class="line">        let wscript &#x3D; new ActiveXObject(&#39;WScript.Shell&#39;)</span><br><span class="line">        if (wscript !&#x3D; null) &#123;</span><br><span class="line">          wscript.SendKeys(&#39;&#123;F11&#125;&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;&#x2F;style&gt;</span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">02top </span><br><span class="line">~~~ </span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;index-container&quot;&gt;</span><br><span class="line">    &lt;!-- 导航区域 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link to&#x3D;&quot;&#x2F;discovery&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;iconfont icon-find-music&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            发现音乐</span><br><span class="line">          &lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link to&#x3D;&quot;&#x2F;playlists&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;iconfont icon-music-list&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            推荐歌单</span><br><span class="line">          &lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link to&#x3D;&quot;&#x2F;songs&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;iconfont icon-music&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            最新音乐</span><br><span class="line">          &lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link to&#x3D;&quot;&#x2F;mvs&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;iconfont icon-mv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            最新MV</span><br><span class="line">          &lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 主体区域 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 播放标签 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;player&quot;&gt;</span><br><span class="line">      &lt;audio :src&#x3D;&quot;musicUrl&quot; autoplay controls id&#x3D;&quot;music&quot;&gt;&lt;&#x2F;audio&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;index&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      musicUrl: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    &#x2F;&#x2F;订阅消息</span><br><span class="line">    this.$pubSub.subscribe(&#39;pauseAudio&#39;, msg &#x3D;&gt; &#123;</span><br><span class="line">      var audio &#x3D; document.getElementById(&#39;music&#39;)</span><br><span class="line">      audio.pause()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>关于JS和Jquery和AJAX的关系</title>
    <url>/2020/04/25/%E4%BA%8EJS%E5%92%8CJquery%E5%92%8CAJAX%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="如题"><a href="#如题" class="headerlink" title="如题"></a>如题</h1><a id="more"></a> 

<p>简单总结： </p>
<p>1、JS是一门前端语言。<br>2、Ajax是一门技术，它提供了异步更新的机制，使用客户端与服务器间交换数据而非整个页面文档，实现页面的局部更新。<br>3、jQuery是一个框架，它对JS进行了封装，使其更方便使用。jQuery使得JS与Ajax的使用更方便</p>
<p>关系比喻：<br>若把js比作木头，那么jquery就是木板（半成品）<br>jQuery与ajax都是js的一个框架，各有各的功能，若js是父亲的话，jquery与ajax就是两个儿子 </p>
<p>详细情况：<br>1.javascript是一种在客户端执行的脚本语言。ajax是基于javascript的一种技术，它主要用途是提供异步刷新（只刷新页面的一部分，而不是整个页面都刷新）。一个是语言,一个是技术,两者有本质区别.<br>2.javascript是一种在浏览器端执行的脚本语言，Ajax是一种创建交互式网页应用的开发技术 ，它是利用了一系列相关的技术其中就包括javascript。<br>1、JavaScript<br> javaScript的简写形式就是JS，一种广泛用于客户端Web开发的脚本语言，常用来给HTML网页添加动态功能（其编写的程序可以被嵌入到HTML或XML页面中，并直接在浏览器中解释执行）。</p>
<p>组成部分：<br>             核心（ECMAScript）、文档对象模型（Document Object Model，简称DOM）、浏览器对象模型（Browser Object Model，简称BOM） </p>
<pre><code>        描述：


 Javascript就是适应动态网页制作的需要而诞生的一种新的编程语言，如今越来越广泛地使用于Internet网页制作上。

Javascript的出现使得网页和用户之间实现了一种实时性的、动态的、交互性的关系，使网页包含更多活跃的元素和更加精彩的内容。

 Javascript短小精悍，又是在客户机上执行的，大大提高了网页的浏览速度和交互能力。同时它又是专门为制作Web网页而量身定做的一种简单的编程语言。</code></pre><p>2、Ajax<br>         AJAX即“Asynchronous JavaScript and XML”（异步JavaScript和XML)，AJAX并非缩写词，而是由Jesse James Gaiiett创造的名词，是指一种创建交互式网页应用的网页开发技术。</p>
<p>组成：<br>            基于XHTML和CSS标准的表示；</p>
<pre><code>使用Document Object Model进行动态显示和交互；

使用XML和XSLT做数据交互和操作；

使用XML HttpRequest与服务器进行异步通信；

使用JavaScript绑定一切。</code></pre><p>描述：<br>            Ajax是结合了Java技术、XML以及JavaScript等编程技术，可以让开发人员构建基于Java技术的Web应用，并打破了使用页面重载的管理。</p>
<pre><code> Ajax技术使用非同步的HTTP请求，在Browser和Web Server之间传递数据，使Browser只更新部分网页内容而不重新载入整个网页。

Ajax是使用客户端脚本与Web服务器交换数据的Web应用开发方法。这样，Web页面不用打断交互流程进行重新加裁，就可以动态地更新。使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面</code></pre><p>3、jQuery<br>jQuery是一个快速的，简洁的javaScript库，使用户能更方便地处理HTML documents、events、实现动画效果，并且方便地为网站提供AJAX交互。</p>
<p>特点：<br>           jQuery是当前很流行的一个JavaScript框架，使用类似于CSS的选择器，可以方便的操作HTML元素，拥有很好的可扩展性，拥有不少插件。 </p>
<p>描述：<br>            对于程序员来说，简化javascript和ajax编程，能够使程序员从设计和书写繁杂的JS应用中解脱出来，将关注点转向功能需求而非实现细节上，从而提高项目的开发速度。</p>
<pre><code> 对于用户来说，改善了页面的视觉效果，增强了与页面的交互性，体验更绚丽的网页物资。

javaScript框架实际上是一系列工具和函数。 

  javaScript是用于Web客户端开发的脚本语言，Ajax是基于JS语言，主要组合JS、CSS、XML三种技术的新技术，是用于创建交互式网页应用的网页开发技术。jQuery是JS的框架，基于JS语言，集合Ajax技术开发出来的JS库，封装JS和Ajax的功能，提供函数接口，大大简化了Ajax，JS的操作。</code></pre><p>项目中用jQuery比较多，具体讲讲他。</p>
<p>jQuery能大大简化JavaScript程序的编写</p>
<p>要使用jQuery，首先要在HTML代码最前面加上对jQuery库的引用，比如：</p>
<script language="javascript" src="/js/jquery.min.js"></script>   //引用

<p>库文件既可以放在本地，也可以直接使用知名公司的CDN（CDN加载jquery的好处），好处是这些大公司的CDN比较流行，用户访问你网站之前很可能在访问别的网站时已经缓存在浏览器中了，所以能加快网站的打开速度。另外一个好处是显而易见的，节省了网站的流量带宽。</p>
<p>Google提供的</p>
<p><a href="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js" target="_blank" rel="noopener">http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js</a></p>
<p>jQuery官方的</p>
<p><a href="http://code.jquery.com/jquery-1.6.min.js" target="_blank" rel="noopener">http://code.jquery.com/jquery-1.6.min.js</a></p>
<p>jQuery代码具体的写法和原生的Javascript写法在执行常见操作时的区别如下：</p>
<p>1 定位元素<br>JS<br>document.getElementById(“abc”) </p>
<p>jQuery<br>$(“#abc”) 通过id定位<br>$(“.abc”) 通过class定位<br>$(“div”) 通过标签定位 </p>
<p>需要注意的是JS返回的结果是这个元素，jQuery返回的结果是一个JS的对象。以下例子中假设已经定位了元素abc。 </p>
<p>2 改变元素的内容<br>JS<br>abc.innerHTML = “test”;                //现在的项目中有用到<br>jQuery<br>abc.html(“test”); </p>
<p>3 显示隐藏元素<br>JS<br>abc.style.display = “none”;              //现在的项目中有用到<br>abc.style.display = “block”; </p>
<p>jQuery<br>abc.hide();<br>abc.show();</p>
<p>abc.toggle();         //在显示和隐藏之间切换、</p>
<p>4 获得焦点 </p>
<p>JS和jQuery是一样的，都是abc.focus(); </p>
<p>5 为表单赋值<br>JS<br>abc.value = “test”;<br>jQuery<br>abc.val(“test”); </p>
<p>6 获得表单的值<br>JS<br>alert(abc.value);<br>jQuery<br>alert(abc.val()); </p>
<p>7 设置元素不可用<br>JS<br>abc.disabled = true;<br>jQuery<br>abc.attr(“disabled”, true);</p>
<p>8 修改元素样式<br>JS<br>abc.style.fontSize=size;<br>jQuery<br>abc.css(‘font-size’, 20);</p>
<p>JS<br>abc.className=”test”;<br>JQuery<br>abc.removeClass();<br>abc.addClass(“test”);</p>
<p>9 判断复选框是否选中</p>
<p>jQuery<br>if(abc.attr(“checked”) == “checked”)<br>注意：网上说的.attr(“checked”) == true实际上不能用，上面这个测试过能用 </p>
<p><img src="https://img-blog.csdn.net/20140731101457124?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVkaWFlbF9sdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=".."></p>
]]></content>
  </entry>
  <entry>
    <title>关于登录页面的设计流程</title>
    <url>/2020/04/24/%E4%BA%8E%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="登录退出页面的设计"><a href="#登录退出页面的设计" class="headerlink" title="登录退出页面的设计"></a>登录退出页面的设计</h1><a id="more"></a> 

<p>技术：http、cookie、session、token </p>
<p>不跨域：sessiom——-  跨域：token  </p>
<p>通过ajax访问服务器的数据、发起登录，生成token并返回、客户存储token、后续请求携带token、验证token </p>
<p>数据绑定: </p>
<pre><code>&lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;
&lt;el-form-item label=&quot;活动名称&quot;&gt;
    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动区域&quot;&gt;
    &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;
      &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;
      &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;
    &lt;/el-select&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动时间&quot;&gt;
    &lt;el-col :span=&quot;11&quot;&gt;
      &lt;el-date-picker type=&quot;date&quot; placeholder=&quot;选择日期&quot; v-model=&quot;form.date1&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-date-picker&gt;
    &lt;/el-col&gt;
    &lt;el-col class=&quot;line&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;
    &lt;el-col :span=&quot;11&quot;&gt;
      &lt;el-time-picker type=&quot;fixed-time&quot; placeholder=&quot;选择时间&quot; v-model=&quot;form.date2&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-time-picker&gt;
    &lt;/el-col&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;即时配送&quot;&gt;
    &lt;el-switch v-model=&quot;form.delivery&quot;&gt;&lt;/el-switch&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动性质&quot;&gt;
    &lt;el-checkbox-group v-model=&quot;form.type&quot;&gt;
      &lt;el-checkbox label=&quot;美食/餐厅线上活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
      &lt;el-checkbox label=&quot;地推活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
      &lt;el-checkbox label=&quot;线下主题活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
      &lt;el-checkbox label=&quot;单纯品牌曝光&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
    &lt;/el-checkbox-group&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;特殊资源&quot;&gt;
    &lt;el-radio-group v-model=&quot;form.resource&quot;&gt;
      &lt;el-radio label=&quot;线上品牌商赞助&quot;&gt;&lt;/el-radio&gt;
      &lt;el-radio label=&quot;线下场地免费&quot;&gt;&lt;/el-radio&gt;
    &lt;/el-radio-group&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动形式&quot;&gt;
    &lt;el-input type=&quot;textarea&quot; v-model=&quot;form.desc&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item&gt;
    &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;立即创建&lt;/el-button&gt;
    &lt;el-button&gt;取消&lt;/el-button&gt;
  &lt;/el-form-item&gt;
&lt;/el-form&gt;
&lt;script&gt;
  export default {
    data() {
      return {
        form: {
          name: &apos;&apos;,
          region: &apos;&apos;,
          date1: &apos;&apos;,
          date2: &apos;&apos;,
          delivery: false,
          type: [],
          resource: &apos;&apos;,
          desc: &apos;&apos;
        }
      }
    },
    methods: {
      onSubmit() {
        console.log(&apos;submit!&apos;);
      }
    }
  }
&lt;/script&gt; </code></pre><p>如图所示，表单绑定了一个对象，这个对象叫form，定义在Data里<br>通过v-model绑定到form.data具体的属性里 </p>
<p>用户名和密码绑定到具体的文本框上：双向绑定 </p>
<p>绑定完成后，就需要验证。 </p>
<pre><code>&lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;
  &lt;el-form-item label=&quot;活动名称&quot; prop=&quot;name&quot;&gt;
    &lt;el-input v-model=&quot;ruleForm.name&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动区域&quot; prop=&quot;region&quot;&gt;
    &lt;el-select v-model=&quot;ruleForm.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;
      &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;
      &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;
    &lt;/el-select&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动时间&quot; required&gt;
    &lt;el-col :span=&quot;11&quot;&gt;
      &lt;el-form-item prop=&quot;date1&quot;&gt;
        &lt;el-date-picker type=&quot;date&quot; placeholder=&quot;选择日期&quot; v-model=&quot;ruleForm.date1&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-date-picker&gt;
      &lt;/el-form-item&gt;
    &lt;/el-col&gt;
    &lt;el-col class=&quot;line&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;
    &lt;el-col :span=&quot;11&quot;&gt;
      &lt;el-form-item prop=&quot;date2&quot;&gt;
        &lt;el-time-picker type=&quot;fixed-time&quot; placeholder=&quot;选择时间&quot; v-model=&quot;ruleForm.date2&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-time-picker&gt;
      &lt;/el-form-item&gt;
    &lt;/el-col&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;即时配送&quot; prop=&quot;delivery&quot;&gt;
    &lt;el-switch v-model=&quot;ruleForm.delivery&quot;&gt;&lt;/el-switch&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动性质&quot; prop=&quot;type&quot;&gt;
    &lt;el-checkbox-group v-model=&quot;ruleForm.type&quot;&gt;
      &lt;el-checkbox label=&quot;美食/餐厅线上活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
      &lt;el-checkbox label=&quot;地推活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
      &lt;el-checkbox label=&quot;线下主题活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
      &lt;el-checkbox label=&quot;单纯品牌曝光&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;
    &lt;/el-checkbox-group&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;特殊资源&quot; prop=&quot;resource&quot;&gt;
    &lt;el-radio-group v-model=&quot;ruleForm.resource&quot;&gt;
      &lt;el-radio label=&quot;线上品牌商赞助&quot;&gt;&lt;/el-radio&gt;
      &lt;el-radio label=&quot;线下场地免费&quot;&gt;&lt;/el-radio&gt;
    &lt;/el-radio-group&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item label=&quot;活动形式&quot; prop=&quot;desc&quot;&gt;
    &lt;el-input type=&quot;textarea&quot; v-model=&quot;ruleForm.desc&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item&gt;
    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&apos;ruleForm&apos;)&quot;&gt;立即创建&lt;/el-button&gt;
    &lt;el-button @click=&quot;resetForm(&apos;ruleForm&apos;)&quot;&gt;重置&lt;/el-button&gt;
  &lt;/el-form-item&gt;
&lt;/el-form&gt;
&lt;script&gt;
  export default {
    data() {
      return {
        ruleForm: {
          name: &apos;&apos;,
          region: &apos;&apos;,
          date1: &apos;&apos;,
          date2: &apos;&apos;,
          delivery: false,
          type: [],
          resource: &apos;&apos;,
          desc: &apos;&apos;
        },
        rules: {
          name: [
            { required: true, message: &apos;请输入活动名称&apos;, trigger: &apos;blur&apos; },
            { min: 3, max: 5, message: &apos;长度在 3 到 5 个字符&apos;, trigger: &apos;blur&apos; }
          ],
          region: [
            { required: true, message: &apos;请选择活动区域&apos;, trigger: &apos;change&apos; }
          ],
          date1: [
            { type: &apos;date&apos;, required: true, message: &apos;请选择日期&apos;, trigger: &apos;change&apos; }
          ],
          date2: [
            { type: &apos;date&apos;, required: true, message: &apos;请选择时间&apos;, trigger: &apos;change&apos; }
          ],
          type: [
            { type: &apos;array&apos;, required: true, message: &apos;请至少选择一个活动性质&apos;, trigger: &apos;change&apos; }
          ],
          resource: [
            { required: true, message: &apos;请选择活动资源&apos;, trigger: &apos;change&apos; }
          ],
          desc: [
            { required: true, message: &apos;请填写活动形式&apos;, trigger: &apos;blur&apos; }
          ]
        }
      };
    },
    methods: {
      submitForm(formName) {
        this.$refs[formName].validate((valid) =&gt; {
          if (valid) {
            alert(&apos;submit!&apos;);
          } else {
            console.log(&apos;error submit!!&apos;);
            return false;
          }
        });
      },
      resetForm(formName) {
        this.$refs[formName].resetFields();
      }
    }
  }
&lt;/script&gt; </code></pre><p>以上是Element的表单验证介绍<br>验证规则，、DATa定义校验对象有了验证规则之后要和数据对象做绑定来验证数据对象,prop进行验证<br>规则在D中定，将规则通过prop绑定到用户名表单项 </p>
<p>重点：配置axios发起登录请求 </p>
<p>先全局配置、导入、挂载原型、发起Ajax请求<br>设置请求路径：根据API进行请求 </p>
<p>通过this发起post请求，把双向绑定的数据当作请求的参数，</p>
<pre><code>
this. $refs . loginFormRef . validate(valid =&gt; {
if (!valid) return;
this . $http . post(&quot;login&quot;, this . loginForm);
I
}); </code></pre><p>请求路径,请求方法,请求参数，需要提供对象,调用post方法，去请求地址 ，将参数拿回来，先打印出来。<br>await和async。<br>解构data. </p>
<p>通过axios拦截器请求添加token </p>
<pre><code>// axios请求拦截
axios. interceptors. request .use (config =&gt; {
1为请求头对象，添加Token验证的Authorization字段
config. headers . Authorization = window. sessionStorage .getItem (&apos;token&apos;)
return config
}</code></pre><p>请求拦截器相当于预处理的过程，处理请求，</p>
]]></content>
  </entry>
  <entry>
    <title>关于前端学习路线的一些总结</title>
    <url>/2020/04/20/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[ <a id="more"></a> 

<p> 首先需要自己写出来HTML文件和CSS，这是最基本的。<br>其次就是需要写JS脚本<br>之后的就是掌握一种框架<br>学到这里差不多可以做一些其他的东西了。<br>可以找一些开源网站的API来做一些实践，比如网易云音乐和天气小程序 ，其他的比如bootstrap和es6语法AJAX，前后端各种技术都需要更仔细的学习。</p>
]]></content>
  </entry>
  <entry>
    <title>关于微信小程序开发</title>
    <url>/2020/04/21/%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><a id="more"></a>

<p>首先是要在微信公众平台注册相关账号等等一系列服务 </p>
<p>然后使用微信小程序的模板，模板已经配置好了相关的生命周期和监听函数 </p>
<p>寻找免费网站的API调用 </p>
<p>以下是一些知识的回顾，关于JAVA的和小程序的一个模拟</p>
<h1 id="这个是有关小程序的一些截图"><a href="#这个是有关小程序的一些截图" class="headerlink" title="这个是有关小程序的一些截图"></a>这个是有关小程序的一些截图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个是APP.json的代码，这个没什么可以注意的，微信写小程序必续经历的一步</span><br><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;: [</span><br><span class="line">    &quot;pages&#x2F;index&#x2F;index&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;: &#123;</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#66ccff&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;天气查询&quot;,</span><br><span class="line">    &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,</span><br><span class="line">    &quot;backgroundTextStyle&quot;: &quot;light&quot;,</span><br><span class="line">    &quot;enablePullDownRefresh&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sitemapLocation&quot;: &quot;sitemap37.json&quot;</span><br><span class="line">&#125;</span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">index.wxss </span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">这个就是微信的样式文件</span><br><span class="line">.container</span><br><span class="line">&#123;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line">.detail</span><br><span class="line">&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.bar</span><br><span class="line">&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  margin: 20rpx 0;  </span><br><span class="line">&#125;</span><br><span class="line">.box</span><br><span class="line">&#123;</span><br><span class="line">  width: 33.3%;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">image&#123;</span><br><span class="line">  width: 220rpx;</span><br><span class="line">&#125;</span><br><span class="line">text&#123;</span><br><span class="line">  font-size: 80rpx;</span><br><span class="line">  color: #3C5F81;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">界面设计代码  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个就是界面的设计</span><br><span class="line">&lt;view class&#x3D;&#39;container&#39;&gt;</span><br><span class="line">  &lt;!-- 区域1：地区选择器 --&gt;</span><br><span class="line">  &lt;picker mode&#x3D;&#39;region&#39; bindchange&#x3D;&#39;changeRegion&#39;&gt;</span><br><span class="line">    &lt;view&gt;&#123;&#123;region&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;picker&gt;</span><br><span class="line">  &lt;!-- 区域2：文本区域 --&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;now.tmp&#125;&#125;℃ &#123;&#123;now.cond_txt&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;!-- 区域3：图片区域 --&gt;</span><br><span class="line">  &lt;image src&#x3D;&#39;&#x2F;images&#x2F;&#123;&#123;now.cond_code&#125;&#125;.png&#39;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">  &lt;!-- 区域4：多行天气信息 --&gt;</span><br><span class="line">  &lt;view class&#x3D;&#39;detail&#39;&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;bar&#39;&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;湿度&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;气压&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;能见度&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;bar&#39;&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;&#123;&#123;now.hum&#125;&#125;%&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;&#123;&#123;now.pres&#125;&#125;hPa&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;&#123;&#123;now.vis&#125;&#125;Km&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;bar&#39;&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;风向&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;风速&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;风力&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;bar&#39;&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;&#123;&#123;now.wind_dir&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;&#123;&#123;now.wind_spd&#125;&#125; Km&#x2F;h&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;box&#39;&gt;&#123;&#123;now.wind_sc&#125;&#125; 级&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">~~~  </span><br><span class="line"></span><br><span class="line">这部分就是最重要的JS文件，里面设置了初始化了生命周期函数等等 </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pages&#x2F;index&#x2F;index.js</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   *&#x2F;</span><br><span class="line">  data: &#123;</span><br><span class="line">    region:[&#39;浙江省&#39;,&#39;嘉兴市&#39;,&#39;南湖区&#39;],</span><br><span class="line">    now:&#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  changeRegion:function(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      region:e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">    this.getWeater();</span><br><span class="line">  &#125;,</span><br><span class="line">  getWeater:function()&#123;</span><br><span class="line">    var that&#x3D;this; </span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: &#39;https:&#x2F;&#x2F;free-api.heweather.net&#x2F;s6&#x2F;weather&#x2F;now?&#39;,</span><br><span class="line">      data:&#123;</span><br><span class="line">        location:that.data.region[1],</span><br><span class="line">        key:&#39;df1686060a674f4fa87357c2796f88e7&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      success:function(res)&#123;</span><br><span class="line">        that.setData(&#123;now:res.data.HeWeather6[0].now&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 生命周期函数--监听页面加载</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onLoad: function (options) &#123;</span><br><span class="line">this.getWeater();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onReady: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 生命周期函数--监听页面显示</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onShow: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 生命周期函数--监听页面隐藏</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onHide: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 生命周期函数--监听页面卸载</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onUnload: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onPullDownRefresh: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 页面上拉触底事件的处理函数</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onReachBottom: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 用户点击右上角分享</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onShareAppMessage: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>关于毕设merkle树的一些启发</title>
    <url>/2020/04/20/%E5%85%B3%E4%BA%8E%E6%AF%95%E8%AE%BEmerkle%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%AF%E5%8F%91/</url>
    <content><![CDATA[<h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><a id="more"></a>
<p>区块链利用Merkle树的数据结构存放所有叶子节点的值<br>并以此为基础生成一个统的哈希值<br>Merkle树的叶子节点存储的是数据信息的哈希值<br>非叶子的节点存储的是对其下面所有叶子节点的组合进行哈希计算后得出的哈希值 </p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>减少交易量<br>只验证统一生成的哈希值 </p>
<p>挖矿：创世区块解密SHA265，全网广播，其他节点验证，其他人放弃计算，将新的区块添加到创世区块后边，逐渐形成主链。 </p>
<h3 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h3><p>加盖时间戳  </p>
<p>所有交易的总结<br>二叉哈希树 ，汇总数据<br>顶部是根，底部是叶子，中间是非叶子节点。 </p>
<p>一个区块中上千交易，将每个交易做一个哈希，最终形成一个哈希。 </p>
<p> 优点、提供了证明数据完整性的/有效性的一个手段  </p>
<p> 很少的内存/磁盘空间占用，并且计算简单快捷<br> 只需要下载一个哈希就行 </p>
<p> Merkle树证明和管理只需要一个非常小而且很简单的信息通过网络传输<br> 偶数交易和奇数交易 </p>
<p> Merkle和POW有很密切的关系 </p>
<p> merkle树也用于WEB服务器的http的响应和验证 </p>
<p> Merkle树遍历和算法的优化 </p>
<p> 降低在遍历中遇到的时间复杂度和空间复杂度  </p>
<p>利用默克尔树构建过程的特点提出了一种基于默克尔树的POW挖矿算法。 </p>
<p>本算法利用默克尔树的结构特点设计了一种随机访间默克尔树每层节点的机制，这就使得<br>挖矿过程中必须要存储完整的默克尔树。为了挖矿算法的可靠性，也分析了默克尔树深<br>度的取值范围。该算法对于轻节点验证来说，只需要消耗较少的内存资源就能完成对区<br>块合法性的验证。最后，还在计算机上模拟了单次挖矿过程，实验数据和理论分析结果<br>完全一致。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">默克尔树挖矿算法Go语言代码</span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot; crypto&#x2F;sh a256&quot; </span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot; math&#x2F;rand&quot;</span><br><span class="line">&quot; time&quot;</span><br><span class="line">)</span><br><span class="line">const(</span><br><span class="line">depth&#x3D;20</span><br><span class="line">cacheLength&#x3D; 1 &lt;&lt; depth)</span><br><span class="line">&#x2F;&#x2F;Node is merkle node</span><br><span class="line">type Node struct &#123;</span><br><span class="line">value [32]byte</span><br><span class="line">&#125;</span><br><span class="line">type Hash struct &#123;</span><br><span class="line">value [321byte</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">&#x2F;&#x2F; GetMerkl eHash start</span><br><span class="line">t1 :&#x3D; time.Now0</span><br><span class="line">cache :&#x3D; m ake([]byte, cach eLength)</span><br><span class="line">fori :&#x3D;0; i &lt; cacheLength, 1++ &#123;</span><br><span class="line">cache[i]&#x3D; byte(rand Intn(256))</span><br><span class="line">&#125;</span><br><span class="line">merkletree : &#x3D; m ake([]Node, 2*cacheLength-1)</span><br><span class="line">fori :&#x3D; 0;1 &lt; cacheLength; i++ &#123;</span><br><span class="line">merkl etree[cacheLength-1+i]value &#x3D; sha256. Sum256(cache[i : i+1]) </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tmp :&#x3D; m ake([]byte, 64)</span><br><span class="line">fori :&#x3D; cacheLength-2,1 &gt;&#x3D;0,1- &#123;</span><br><span class="line">copy(tmp[: 32], merkletree[2*i+1]value[: ])</span><br><span class="line">copy(tmp[32: ], merkl etree[2*+2] value[:])</span><br><span class="line">ah : &#x3D; sh a256 Sum 256(tmp[:])</span><br><span class="line">copy(merkletree[i]value[: ], ah[:])</span><br><span class="line">&#125;</span><br><span class="line">el apsed :&#x3D; time. Since(t1)</span><br><span class="line">I1 GetMerkl eHash end</span><br><span class="line">I1 MerkleMining start</span><br><span class="line">&#x2F;&#x2F;&#x3D;</span><br><span class="line">t2 &#x3D; time .Now0</span><br><span class="line">header :&#x3D; make([]byte, 80)</span><br><span class="line">hash : &#x3D; m ake([]Hash, depth+1)</span><br><span class="line">hash[Q].value &#x3D; sha256 Sum 256(header) </span><br><span class="line"></span><br><span class="line">fori &#x3D; 1;1 &lt;&#x3D; depth;, i++ &#123;</span><br><span class="line">divisor :&#x3D; pow(2, i)</span><br><span class="line">k :&#x3D; bigNumber(h[i-1]:value[: ]) % divisor</span><br><span class="line">c :&#x3D; int( divisor - 1)</span><br><span class="line">copy(tmp[:32], hash[i-1].value[:])</span><br><span class="line">copy(tmp[32: ], merkl etree[c+k]value[ ])</span><br><span class="line">hash[]value &#x3D; sha256.Sum 256(tmp[:])</span><br><span class="line">data :&#x3D; m ake ([ ]byte, (depth+ 1)*4)</span><br><span class="line">fori &#x3D; 0,1 &lt;&#x3D; depth;, i++ &#123;</span><br><span class="line">copy(data[i*4 (i+1)*4], hash[i].value[:]) </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">h :&#x3D; sh a256 Sum 256(data[: ])</span><br><span class="line">elaps edMining : &#x3D; time. Since(t2)</span><br><span class="line">&#x2F;1 MerkleMining end</span><br><span class="line">&#x2F;&#x2F;&#x3D;:</span><br><span class="line">fmt. Println(&quot;\nGetMerkl eHash: &quot;, elapsed)</span><br><span class="line">fmt.Printn(&quot;\nMerkle Mining: &quot;, elapsedMining)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>创世区块</title>
    <url>/2020/04/29/%E5%88%9B%E4%B8%96%E5%8C%BA%E5%9D%97/</url>
    <content><![CDATA[<h1 id="创世区块"><a href="#创世区块" class="headerlink" title="创世区块"></a>创世区块</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">&#x2F;&#x2F;Type结构体</span><br><span class="line">&#x2F;&#x2F;声明区块的结构体 Block名称</span><br><span class="line">type Block struct &#123;</span><br><span class="line">&#x2F;&#x2F; 上一个区块的哈希</span><br><span class="line">	Prehsh string</span><br><span class="line">	&#x2F;&#x2F;当前区块的哈希</span><br><span class="line">	HashCode string</span><br><span class="line">	&#x2F;&#x2F;shi jian chuo</span><br><span class="line">	TimeStamp string</span><br><span class="line">	&#x2F;&#x2F;dang xian wang luo de nan du xi shu</span><br><span class="line">	&#x2F;&#x2F;kong zhi ha xi you ji ge qian dao ling</span><br><span class="line">	Diff int</span><br><span class="line">	&#x2F;&#x2F;cun jiao yi xin xi</span><br><span class="line">	Data string</span><br><span class="line">	&#x2F;&#x2F;qu kuai gao du</span><br><span class="line">	Index int</span><br><span class="line">	&#x2F;&#x2F;sui ji zhi</span><br><span class="line">	Nonce int</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;chuang jian chuang shi qu kuai (lian zhong de di yi ge qukuai)</span><br><span class="line">func  GrnerateFirstBlock(data string)  Block &#123;</span><br><span class="line">	&#x2F;&#x2F;fangfa jiao yi xi xin fan hui yi ge qu kaui</span><br><span class="line">	&#x2F;&#x2F;sheng ming bing fu zhi yige kuai jiang di yi ge qukuai fanhui</span><br><span class="line">	&#x2F;&#x2F;创建第一个区块</span><br><span class="line">	var firstblock Block</span><br><span class="line">	firstblock.Prehsh&#x3D;&quot;&#39;0&#39;&quot;</span><br><span class="line">	firstblock.TimeStamp&#x3D;time.Now().String()</span><br><span class="line">	firstblock.Diff&#x3D;4</span><br><span class="line">	firstblock.Data&#x3D;data</span><br><span class="line">	firstblock.Index&#x3D;1</span><br><span class="line">	firstblock.Nonce&#x3D;0</span><br><span class="line">	firstblock.HashCode &#x3D;GenerationHashValue(firstblock)</span><br><span class="line">	return firstblock</span><br><span class="line">	&#x2F;&#x2F;当前块的哈希</span><br><span class="line">	&#x2F;&#x2F;用SHA256算一个真正的哈希</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;生成区块的哈希值</span><br><span class="line">func GenerationHashValue(block Block)string &#123;</span><br><span class="line">	var hashdata &#x3D; strconv.Itoa(block.Index) + strconv.Itoa(block.Nonce) +</span><br><span class="line">		strconv.Itoa(block.Diff) +block.TimeStamp</span><br><span class="line">	&#x2F;&#x2F;哈希算法</span><br><span class="line">	var sha  &#x3D; sha256.New()</span><br><span class="line">	sha.Write([]byte(hashdata))</span><br><span class="line">	hashed :&#x3D;sha.Sum(b：nil)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main ()</span><br><span class="line">&#x2F;&#x2F;创建创世区块</span><br><span class="line">firstBlock :&#x3D;GrnerateFirstBlock(data:&quot;创世区块&quot;)</span><br><span class="line">fmt.Println(firstBlock)</span><br><span class="line">fmt.Println(firstBlock.Data)</span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;crypto&#x2F;sha256&quot;</span><br><span class="line">	&quot;encoding&#x2F;hex&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;strconv&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Type结构体</span><br><span class="line">&#x2F;&#x2F;声明区块的结构体 Block名称</span><br><span class="line">type Block struct &#123;</span><br><span class="line">&#x2F;&#x2F; 上一个区块的哈希</span><br><span class="line">PreHash string</span><br><span class="line">&#x2F;&#x2F;当前区块的哈希</span><br><span class="line">HashCode string</span><br><span class="line">&#x2F;&#x2F;时间戳</span><br><span class="line">TimeStamp string</span><br><span class="line">&#x2F;&#x2F;当前网络难度系数</span><br><span class="line">&#x2F;&#x2F;控制哈希有几个前导0</span><br><span class="line">Diff int</span><br><span class="line">&#x2F;&#x2F;存储交易信息</span><br><span class="line">Data string</span><br><span class="line">&#x2F;&#x2F;区块高度</span><br><span class="line">Index int</span><br><span class="line">&#x2F;&#x2F;随机值</span><br><span class="line">Nonce int</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;创建创世区块(链中第一个区块)</span><br><span class="line">func  GenerateFirstBlock(data string)  Block &#123;</span><br><span class="line">&#x2F;&#x2F;创建第一个区块</span><br><span class="line">var firstblock Block</span><br><span class="line">firstblock.PreHash&#x3D;&quot;&#39;0&#39;&quot;</span><br><span class="line">firstblock.TimeStamp&#x3D;time.Now().String()</span><br><span class="line">firstblock.Diff&#x3D;4</span><br><span class="line">firstblock.Data&#x3D;data</span><br><span class="line">firstblock.Index&#x3D;1</span><br><span class="line">firstblock.Nonce&#x3D;0</span><br><span class="line">firstblock.HashCode &#x3D;GenerationHashValue(firstblock)</span><br><span class="line">return firstblock</span><br><span class="line">&#x2F;&#x2F;当前块的哈希</span><br><span class="line">&#x2F;&#x2F;用SHA256算一个真正的哈希</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;生成区块的哈希值</span><br><span class="line">func GenerationHashValue(block Block)string &#123;</span><br><span class="line">var hashdata &#x3D; strconv.Itoa(block.Index) + strconv.Itoa(block.Nonce) +</span><br><span class="line">strconv.Itoa(block.Diff) +block.TimeStamp</span><br><span class="line">&#x2F;&#x2F;哈希算法</span><br><span class="line">var sha  &#x3D; sha256.New()</span><br><span class="line">sha.Write([]byte(hashdata))</span><br><span class="line">hashed :&#x3D; sha.Sum( nil)</span><br><span class="line">return hex.EncodeToString(hashed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main () &#123;</span><br><span class="line">	&#x2F;&#x2F;创建创世区块</span><br><span class="line">	firstBlock :&#x3D;GenerateFirstBlock(&quot;创世区块&quot;)</span><br><span class="line"></span><br><span class="line">	fmt.Println(firstBlock)</span><br><span class="line">	fmt.Println(firstBlock.Data)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>函数和方法的区别 </title>
    <url>/2020/04/25/%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h1><a id="more"></a> 

<p>总结就是一句话：类里边的是方法，类外边的是函数</p>
<p>用对象调用的叫方法，直接调函数名的叫函数</p>
<p>扩展作用：</p>
<p>函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 getclientip；</p>
<p>方法的命名使用驼峰法（首字母小写），例如 getUserName； </p>
<p>在Python中函数和方法是有区别的。<br>区别一所处的位置：</p>
<p>函数是直接写文件中而不是class中，方法是只能写在class中。</p>
<p>区别二定义的方式：</p>
<p> 1.函数定义的方式 def关键字  然后接函数名 再是括号 括号里面写形参也可以省略不写形参<br>def functionName():</p>
<pre><code>&quot;&quot;&quot;这里是函数的注释&quot;&quot;&quot;


print(&quot;这一块写函数的内容&quot;)</code></pre><p> 2.方法定义的方式 首先方法是定义在类中的其他他大体和函数定义差不多，这里需要注意的一点就是方法必须带一个默认参数(相当于this)，静态方法除外<br>class className(super):</p>
<pre><code>def methodName(self):
    &quot;&quot;&quot;这里是方法的注释
    self相当于this；
    &quot;&quot;&quot;
    print(&quot;这里是方法的内容&quot;)</code></pre><p>区别三调用的方式：</p>
<p> 1.函数的调用：函数的调用是直接写  函数名(函数参数1,函数参数2,……) </p>
<p>def functionName():<br>    print(“这是一个函数”)</p>
<p>#调用<br>functionName()</p>
<p>2.方法的调用：方法是通过对象点方法调用的（这里是指对象方法）</p>
<p>class className:</p>
<pre><code>def method(self):
    print(&quot;这是一个方法&quot;)</code></pre><p>#调用———————<br>#实例化对象<br>c=className()</p>
<p>c.method() </p>
<p>　函数（function）是可以执行的javascript代码块，由javascript程序定义或javascript实现预定义。函数可以带有实际参数或者形式参数，用于指定这个函数执行计算要使用的一个或多个值，而且还可以返回值，以表示计算的结果。</p>
<p>　　方法（method）是通过对象调用的javascript函数。也就是说，方法也是函数，只是比较特殊的函数。假设有一个函数是fn，一个对象是obj，那么就可以定义一个method：</p>
<p>有些概念我一直很困惑，譬如“面向对象”、“类”和“实例化”。</p>
<p>函数是一段代码，通过名字来进行调用。它能将一些数据（参数）传递进去进行处理，然后返回一些数据（返回值），也可以没有返回值。</p>
<p>所有传递给函数的数据都是显式传递的。</p>
<p>方法也是一段代码，也通过名字来进行调用，但它跟一个对象相关联。方法和函数大致上是相同的，但有两个主要的不同之处：</p>
<p>方法中的数据是隐式传递的；<br>方法可以操作类内部的数据（请记住，对象是类的实例化–类定义了一个数据类型，而对象是该数据类型的一个实例化）<br>以上只是简略的解释，忽略了作用域之类的问题。</p>
<p>对于 1），你应当再加上“ 方法在 C++ 中是被称为成员函数”。因此，在 C++ 中的“方法”和“函数”的区别，就是“成员函数”和“函数”的区别。此外，诸如 Java 一类的编程语言只有“方法”。所以这时候就是“静态方法”和“方法”直接的区别。</p>
<p>对于2），你应当补上方法可以操作已在类中声明的私有实例（成员）数据。其他代码都可以访问公共实例数据。</p>
<p>方法和对象相关；</p>
<p>函数和对象无关。</p>
<p>Java中只有方法，C中只有函数，而C++里取决于是否在类中。</p>
]]></content>
  </entry>
  <entry>
    <title>图片插件测试</title>
    <url>/2020/04/29/%E5%9B%BE%E7%89%87%E6%8F%92%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="图片插件测试"><a href="#图片插件测试" class="headerlink" title="图片插件测试"></a>图片插件测试</h1><a id="more"></a> 

<p>我们引入一个图片 </p>
<p><img src="/.com//1.jpg" alt="图片插件测试"></p>
]]></content>
  </entry>
  <entry>
    <title>封面图的设计</title>
    <url>/2020/05/09/%E5%9B%BE%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;div class&#x3D;&quot;index-page&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;index-hd&quot;&gt;</span><br><span class="line">      &lt;img class&#x3D;&quot;index-logo&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;images&#x2F;logo.png&quot; &gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;title-text&quot;&gt;Sol 商城组件&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.index-page &#123;</span><br><span class="line">  background: #f8f8f8;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">  .index-hd &#123;</span><br><span class="line">    padding: 80px 10px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    .index-logo &#123;</span><br><span class="line">      width: 40px;</span><br><span class="line">      height: 40px;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">    .title-text &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">      font-size: 28px;</span><br><span class="line">      margin-left: 12px;</span><br><span class="line">      font-weight: 400;</span><br><span class="line">      font-family: &#39;Dosis&#39;, &#39;Source Sans Pro&#39;, &#39;Helvetica Neue&#39;, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>基于Merkle tree的安全技术研究与应用</title>
    <url>/2020/04/17/%E5%9F%BA%E4%BA%8EMerkle-tree%E7%9A%84%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a>

<h2 id="新建一个blog"><a href="#新建一个blog" class="headerlink" title="新建一个blog"></a>新建一个blog</h2><p>hexo new “内容” </p>
<h2 id="vsc侧边预览"><a href="#vsc侧边预览" class="headerlink" title="vsc侧边预览"></a>vsc侧边预览</h2><p>c+s+p </p>
<p><strong>随着信息技术的快速发展</strong>，网络安全、隐私保护等问题越来越受到人们的重视。传<br>统的解决这些问题的方式是设计复杂的密码学协议强化安全性,但传统的解决方式都是<br>基于中心化的系统，系统中心机构的掌控力越强，就越容易受到攻击者的攻击。而近几<br>年来兴起的区块链技术却革命性的采用了去中心化的解决思路。比特币是最早的区块链<br>技术应用，创始人中本聪设计了一种工作量证明机制来保障去中心化系统的资产转移的<br>安全性。在不可信的网络环境中，采用工作量证明机制的区块链系统能够在存在不可信<br>节点的情况下完成数字资产的发行及转移。不同的区块链基于不同的经济激励和惩罚机<br>制，可以获得不同的安全性。其中，工作量证明目前仍然是区块链中最安全的共识机制，<br>在此基础上采用的不同挖矿算法是保障新区块链免受51%攻击的必要手段。为了保障区<br>块链的安全性，防止算力过于集中到某几个节点，免受51%的算力攻击，则需要尽量将<br>算力分散到普通用户。这就要求提高普通用户的挖矿比例，降低挖矿的准入门槛。每个<br>用户都有CPU和GPU资源，如果挖矿算法对CPU和GPU友好，那么就能在一定程度<br>. 上增加普通用户挖矿的比例。ASIC矿机虽然挖矿效率高，但是普通用户挖矿有一定的<br>准入门槛。为了抑制ASIC矿机的加入,需要在算法设计.上提高对内存资源的利用要求。</p>
<p><strong>区块链技术解决了节点间信任的问题，因此数据交换甚至交易均可在匿名的情况下进行。由于节点之间的数据交换遵循固定且预知的算法，因而其数据交互是无须信任的，可以基于地址而非个人身份进行，因此交易双方无须通过公开身份的方式让对方产生信任。</strong>（本段来自与解码区块链）</p>
<p>由于区块链不可篡改特性，已经部署.上线的智能合约代码，将无法修改或升<br>级。–旦智能合约因为自身代码设计产生的问题，导致的智能合约安全漏洞，以<br>致整个区块链应用土崩瓦解，或将产生不可逆转的重大损失。而使用- - 些代码缺<br>陷检查方法，例如模型检查、静态代码分析等技术，提前发现程序缺陷代码，及<br>时修改问题代码，可起防患于未然的作用。本文基于以太坊区块链平台，以开发<br>安全的去中心的区块链应用作为切入点，对区块链技术原理、以太坊区块链去中<br>心化应用框架、区块链智能合约开发、以太坊智能合约缺陷漏洞方面等展开深入<br>研究，并提出一种结合形式化验证的模型检查技术和静态代码检查技术的，对智<br>能合约缺陷漏洞进行验证的工具框架。本文最后基于区块链应用框架和安全验证<br>的工具框架，开发了一款区块链去中心化应用“加密熊猫”，和一个自动化以太坊<br>智能合约漏洞安全检查工具，并详细介绍去中心化应用“加密熊猫”和智能合约<br>验证工具的开发过程和技术原理。（来自于区块链安全验证工具的设计与实现） </p>
<p>智能合约，尤其是基于区块链的智能合约，目前还处在初级阶段，尚未有任何实质性突破和应用，同时也面临着问题与挑战：一是安全性问题；二是私密性问题；三是意外情景问题。同时，人们对智能合约还存在不少的误解。 </p>
<p>关键问题之一是安全性及信任度的问题。这与影响区块链实施的问题类似：智能合约系统都被设计成无须信任的环境，这意味着无法改正出现的错误。这是由区块链的不可逆特性决定的。例如，在区块链中，如果你将货币发送给某个地址，这个操作是无法撤销的。因此，如果你与诈骗犯进行交易或者你已经将货币发送到错误的地址中，那么很不幸，金钱损失是无法挽回的。在现实生活中，这些事情可以通过中心化的系统来撤销，但是在智能合约中不行。同样地，在合约代码的设计过程中也有欺诈的问题：某人需要设计（编程）合约，在合约设计时就会需要确保没有欺诈的问题发生。对于去中心化的系统，用户只能自己承担相应的风险。 </p>
<p>（二）私密性问题</p>
<p>有效利用区块链的一大挑战就是区块链提供彻底的透明度。例如，如果十家银行联合在一起建立一个区块链，其中有两家进行了一项双向交易，这项交易将立即在区块链上对其他八家可见。虽然也可以设计缓解这个问题的各种策略，但目前还没有一种策略可以击败简单有效的中央数据库，除非能有一个可靠的管理员完全控制参与者的权限。</p>
<p>智能合约尤其是基于区块链的智能合约，同样存在这样的问题。每个智能合约都包含了自己的区块链数据库，并且具有完全控制能力。由于区块链数据库中所有的读写操作都是由合约代码主导的，所以其他合约无法直接读取其数据。尽管一个智能合约不能访问其他合约的数据，即一个智能合约无法读取其他合约的数据，但是其数据仍然存储在区块链中的每一个验证节点上。对于每个区块链的参与者来说，完全可以控制一个系统的存储器或者磁盘。如果他们想要从自己的系统中阅读信息，通过计算机手段，是完全可以做到的。</p>
<p>那么，把智能合约隐藏到网页数据中去，就像把它隐藏在代码里一样，是否就可以保证隐私了呢？当然，一般的用户不会看到它，因为它并未显示在他们的浏览器窗口。但是，只需要一个网页浏览器的“查看源文件”功能即可使得隐藏的信息变得普遍可见。同样，对于隐藏在智能合约中的数据，所需要的只是有人修改区块链软件显示合约的代码，就可以看到隐藏的内容。这种修改只要一个水平高的程序员花很短时间就可以办到。因此，智能合约的私密性问题目前还是存在的。</p>
<p>（三）意外情景问题</p>
<p>应当承认，在某一层面上，智能合约听起来确实像一个理想化的场景。如果你不付款，你的汽车将被远程自动收回，这一过程不需要任何人为干预。但是在理论上，智能合约有利的一面是将使金融机构更加乐意接受穷人带来的风险，再也不用担心穷人还不清贷款。如果没有智能合约，穷人可能得不到金融机构的贷款。因为，遇到最坏的情况，如果借贷人不能偿还贷款，那么收回资产对银行而言，是件轻而易举的事。除了增加获得金融机构贷款的机会外，智能合约也有潜力为没有优势的人打开其他壁垒较高行业的大门。没有智能合约，这些人就没有机会也没有可能获得收益。</p>
<p>尽管在理论上，智能合约听起来非常好，但如何正确、合适地处理意外场景下的合约执行，是一个问题。比如需要收回的汽车正在高速公路行驶的时候，撤销汽车的使用权操作将是十分粗鲁和危险的，而如何准确判断汽车的执行状态也是存在技术难点的。 </p>
<p>1.基于传统的默克尔树，提出了一种基于默克尔树的工作量证明挖矿算法。本算法<br>首先按照- -定的规则生成一个随机数集合并生成默克尔树，之后在默克尔树的每层任意<br>选择一个节点，最后连接所有的节点做哈希运算。整个算法过程需要消耗大量的内存资<br>源，这符合区块链中挖矿算法需要占用计算机资源的要求。并且，因为挖矿算法占用系<br>统内存较多，可以在一定程度上增加ASIC矿机的设计难度，缓解挖矿算力的中心化问<br>题。</p>
<p>3.基于以太坊智能合约提出了一种公钥证书发放方案。传统的公钥证书发放总是伴<br>随着攻击者对信道、证书发放机构的攻击。而利用以太坊智能合约发放公钥证书，用户<br>和证书发放机构都可以绕过传统的信道。同时，以太坊高度安全的共识机制又可以保证<br>攻击成本非常高。</p>
<p>关键词:默克尔树;工作量证明;区块链;哈希函数;智能合约;公钥证书  </p>
<h2 id="开题报告"><a href="#开题报告" class="headerlink" title="开题报告"></a>开题报告</h2><p>区块链目前成为国家战略，引领第四次工业革命浪潮。区块链科技创新技术吸引多方眼球，俨然成为科技界和金融圈里的“网红”。区块链技术在金融领域、共享经济、物联网等方面有着很高的应用价值，成功吸引了微软、阿里巴巴、腾讯、京东、纳斯达克、摩根大通等国内外行业巨头的广泛关注和积极布局。正因为此，业界人士认为，区块链技术是最有潜力触发新一轮颠覆性革命浪潮的核心技术。<br>在2016年末召开的国务院常务会议上，《“十三五”国家信息化规划》审核通过，其中明确提出“要加强区块链等新技术基础研发和前沿布局，构筑新赛场先发主导优势。”<br>区块链是大数据人工智能时代下“可信和价值互联”的前沿技术，引领智慧生活，引发改变信任的革命，是建设数字中国的重要基石。业内人士表示，政策的发布以及相关协会的成立标志着国家开始发力区块链技术，在今后一段时间里，相关行业与技术将会有质的发展并应用在各行各业中。<br>区块链起源于比特币，2008年11月1日，一位自称中本聪(Satoshi Nakamoto)的人发表了《比特币:一种点对点的电子现金系统》一文  ，阐述了基于P2P网络技术、加密技术、时间戳技术、区块链技术等的电子现金系统的构架理念，这标志着比特币的诞生。两个月后理论步入实践，2009年1月3日第一个序号为0的创世区块诞生。几天后2009年1月9日出现序号为1的区块，并与序号为0的创世区块相连接形成了链，标志着区块链的诞生。<br>区块链是一个信息技术领域的术语。从本质上讲，它是一个共享数据库，存储于其中的数据或信息，具有不可伪造、全程留痕、可以追溯、公开透明、集体维护等特征。基于这些特征，区块链技术奠定了坚实的“信任“基础，创造了可靠的“合作”机制，具有广阔的运用前景。<br>梅克尔树（Merkle）通常包含区块体的底层 (交易) 数据库， 区块头的根哈希值 (即Merkle根) 以及所有沿底层区块数据到根哈希的分支。梅克尔树运算过程一般是将区块体的数据进行分组哈希， 并将生成的新哈希值插入到梅克尔树中，如此递归直到只剩最后一个根哈希值并记为区块头的 Merkle根。 最常见的梅克尔树是比特币采用的二叉梅克尔树,，其每个哈希节点总是包含两个相邻的数据块或其哈希值 。<br>区块链技术作为数字经济的基础设施，成为许多实体经济区块链创新应用的基本软件。<br>区块链技术与Merkel数据树网络融合的毕业设计课题，将开创崭新的科技探索，是有意义的网络科技的探索。着力培养学生勇于探索未知科技世界的精神，增加软件世界的研究经历与体会。</p>
<p>通过查询科技文献了解区块链与网络Merkel数据树系统的最新发展状况，学习与掌握计算机语言编程环境，学习了解云计算平台的知识。研究网络Merkel数据树技术框架、工作原理、软件实现方法。研究区块链分布式数据库技术，了解不可伪造、全程留痕、可以追溯、公开透明、集体维护技术特征的工作原理。同时，研究非对称加密、Markel DAG数据树结构、智能合约、分布式数据存储技术、哈希算法、数字签名技术、数字加密钱包等技术。 </p>
<p>三、毕业设计（论文）应完成的具体工作<br>在本毕业设计论文期间要求学生完成以下工作：<br>1、通过科技文献查询对Merkel数据树系统与区块链技术的国内外状况有充分的了解与深刻认识。<br>2、研究区块链相关技术理论，并掌握区块链上链技术的软件接口。<br>3、研究Merkel数据树软件工作原理，编写并调试软件，最终实现Merkel数据树平台。<br>4、Merkel数据树软件与区块链软件模块链接成功后，能够提供软件演示；<br>5、完成五千字以上的英文翻译，做到专业词汇翻译正确，语句符合中文表达习惯。</p>
<p>四、毕业设计（论文）进度安排</p>
<p>序号    设计（论文）各阶段名称    时间安排（教学周） </p>
<p>1    查阅相关文献资料、撰写开题报告    02.17-03.8 </p>
<p>2    研究区块链基本原理、网络Merkel数据树软件    03.8-03.15 </p>
<p>3    毕业设计软件整体设计框架    03.15-03.25 </p>
<p>4    网络Merkel数据树软件编写与实现    03.25-04.15 </p>
<p>5    区块链软件编程环境的搭建    04.15-04.20 </p>
<p>6    实现区块链与网络Merkel数据树软件接口模块    04.20-05.10 </p>
<p>7    整体系统软件的联合调试    05.10-05.15 </p>
<p>8    资料收集，整理软件设计数据与图表    05.15-05.20 </p>
<p>9    撰写毕业论文、英文翻译    05.20-05.28 </p>
<p>10    论文答辩    05.28-06.05</p>
]]></content>
  </entry>
  <entry>
    <title>如何高效的找开源项目</title>
    <url>/2020/04/29/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E6%89%BE%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="开源项目查找"><a href="#开源项目查找" class="headerlink" title="开源项目查找"></a>开源项目查找</h2><a id="more"></a>
<p>In:name xxxx </p>
<p>In:name xxxx stras:&gt;xxx forks:&gt;xxxx </p>
<p>in:readme xxxx </p>
<p>in :description languang:java pushed:&gt;2019-01-03</p>
<p><img src="/.com//%5Cimages%5Cpasted-2.png" alt="upload successful"></p>
]]></content>
  </entry>
  <entry>
    <title>基于默克尔树的POW方案</title>
    <url>/2020/04/29/%E5%9F%BA%E4%BA%8E%E9%BB%98%E5%85%8B%E5%B0%94%E6%A0%91%E7%9A%84POW%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="基于默克尔树的POW方案"><a href="#基于默克尔树的POW方案" class="headerlink" title="基于默克尔树的POW方案"></a>基于默克尔树的POW方案</h2><a id="more"></a> 
<h2 id="默克尔树"><a href="#默克尔树" class="headerlink" title="默克尔树"></a>默克尔树</h2><p>默克尔树包括生成过程和验证过程  </p>
<h2 id="默克尔树的构建过程"><a href="#默克尔树的构建过程" class="headerlink" title="默克尔树的构建过程"></a>默克尔树的构建过程</h2><p> 默克尔树是一种深度为d的二叉树，总节点个数为2d+1- 1,其中叶子节点个数为2d。<br>为了得到根哈希no，首先将要验证的数据cache依次存入到默克尔树的叶子节点中，然<br>后选择–种单向哈希函数H计算出每个叶子节点的哈希值nzd-1,.，.n2d+1_2,然后内部<br>节点进行两两结合运算H(n2+1lln2:+2)得到n，最终得到一个树根no，这个树根叫做根<br>哈希。非叶子第i个节点的两个子节点分别为n2+1和n2i+2。默克尔树如图3.1所示。<br>构建默克尔树的输入值是一个伪随机数集合cache,而输出值是默克尔树的所有节<br>点值n,1…n.+-.,.2+1-2,2+<br>2。默克尔树计算根哈希函数GetMerkleHash()过程如表3 1<br>所示。</p>
<p>第1<del>2步，首先填充默克尔树的所有叶子节点。由图1可以发现默克尔树的叶子节<br>点编号从2d- 1开始，共有20个叶子节点。将伪随机数集合cache的每个字节数据的哈<br>希值依次填充到叶子节点中。<br>第3</del>4步，计算内部节点的哈希值。因为编号为i的节点的子节点为n2i+1和n2i<br>2i+2，<br>则将子节点连接，然后作为哈希函数H的输入值得到相应的哈希值nio依次类推，注意，</p>
<p>计算内部节点的时候先从较大编号的节点开始，这是因为首先要计算子节点才能计算父<br>节点。<br>第5步，返回计算完成的所有默克尔树节.点.,…+.-.,2+12.2 </p>
<h2 id="POW工作量证明"><a href="#POW工作量证明" class="headerlink" title="POW工作量证明"></a>POW工作量证明</h2><p>实现一个简单的挖矿 </p>
<p>哈希碰撞 </p>
]]></content>
  </entry>
  <entry>
    <title>轮播图</title>
    <url>/2020/05/09/%E6%92%AD%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;van-swipe  :autoplay&#x3D;&quot;3000&quot; indicator-color&#x3D;&quot;red&quot; class&#x3D;&quot;home-swiper&quot;&gt;</span><br><span class="line">      &lt;van-swipe-item v-for&#x3D;&quot;item in banner&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;img :src&#x3D;&quot;item.picUrl&quot; :alt&#x3D;&quot;item.title&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;van-swipe-item&gt;</span><br><span class="line">    &lt;&#x2F;van-swipe&gt; </span><br><span class="line">    </span><br><span class="line">    .home-swiper,.home-swiper img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 188px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>新区快</title>
    <url>/2020/04/29/%E6%96%B0%E5%8C%BA%E5%BF%AB/</url>
    <content><![CDATA[<h1 id="新区快的生成"><a href="#新区快的生成" class="headerlink" title="新区快的生成"></a>新区快的生成</h1><a id="more"></a>

<pre><code>package main

import (
    &quot;crypto/sha256&quot;
    &quot;encoding/hex&quot;
    &quot;fmt&quot;
    _ &quot;hash&quot;
    &quot;strconv&quot;
    &quot;strings&quot;
    &quot;time&quot;
)

//Type结构体
//声明区块的结构体 Block名称
type Block struct {
// 上一个区块的哈希
PreHash string
//当前区块的哈希
HashCode string
//时间戳
TimeStamp string
//当前网络难度系数
//控制哈希有几个前导0
Diff int
//存储交易信息
Data string
//区块高度
Index int
//随机值
Nonce int
}
//创建创世区块(链中第一个区块)
func  GenerateFirstBlock(data string)  Block {
//创建第一个区块
var firstblock Block
firstblock.PreHash=&quot;&apos;0&apos;&quot;
firstblock.TimeStamp=time.Now().String()
firstblock.Diff=4
firstblock.Data=data
firstblock.Index=1
firstblock.Nonce=0
firstblock.HashCode =GenerationHashValue(firstblock)
return firstblock
//当前块的哈希
//用SHA256算一个真正的哈希
}
//生成区块的哈希值
func GenerationHashValue(block Block)string {
var hashdata = strconv.Itoa(block.Index) + strconv.Itoa(block.Nonce) +
strconv.Itoa(block.Diff) +block.TimeStamp
//哈希算法
var sha  = sha256.New()
sha.Write([]byte(hashdata))
hashed := sha.Sum( nil)
return hex.EncodeToString(hashed)
}

func main () {
    //创建创世区块
    firstBlock :=GenerateFirstBlock(&quot;创世区块&quot;)

    fmt.Println(firstBlock)
    fmt.Println(firstBlock.Data)
    //
    GenerateNextBlock(&quot;第二个区块&quot;,firstBlock)
 }
 //产生新的区块
func GenerateNextBlock(data string, oldBlock Block) Block {
    var  newBlock  Block
    newBlock.TimeStamp =time.Now().String()
    newBlock.Diff=4
    newBlock.Index =2
    newBlock.Data=data
    newBlock.PreHash=oldBlock.HashCode
    newBlock.Nonce=0
    //

newBlock.HashCode=pow(newBlock.Diff,&amp;newBlock)
    return newBlock
}
//pow工作量证明
func pow(diff int,block *Block) string {
    //
    for  {
        hash :=GenerationHashValue(*block)
        fmt.Println(hash)
        if strings.HasPrefix(hash,strings.Repeat(&quot;0&quot;,diff)) {
            fmt.Println(&quot;挖矿成功&quot;)
            return hash } else
        {
            block.Nonce++
        }
            }
}



</code></pre>]]></content>
  </entry>
  <entry>
    <title>欢迎来到这里，我是微笑的风</title>
    <url>/2020/04/16/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E8%BF%99%E9%87%8C%EF%BC%8C%E6%88%91%E6%98%AF%E5%BE%AE%E7%AC%91%E7%9A%84%E9%A3%8E/</url>
    <content><![CDATA[<h1 id="初见Markdown"><a href="#初见Markdown" class="headerlink" title="初见Markdown"></a>初见Markdown</h1><a id="more"></a>

<h2 id="markdown使用教程"><a href="#markdown使用教程" class="headerlink" title="markdown使用教程"></a>markdown使用教程</h2><p>1、段落引用</p>
<p>2、段落间的空格 </p>
<h1 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h1><blockquote>
<p>通过”&gt;”可以高亮标注文字段</p>
</blockquote>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>[菜鸟教程Markdown文档]（<a href="https://www.runoob.com/markdown/md-link.html）" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-link.html）</a> </p>
<p>【名称】（超链接）</p>
<p>[Test] (<a href="https://www.baidu.com/link?url=7Rb3lUWUxUImITv4nQuaESi42-mfTXhMeSSfBIq02KpYztovkZ-b4qqFO2nNYlUcajt4tS38anFVBQDnRe76J_&amp;wd=&amp;eqid=96e817400003e0e8000000035e97d45c" target="_blank" rel="noopener">https://www.baidu.com/link?url=7Rb3lUWUxUImITv4nQuaESi42-mfTXhMeSSfBIq02KpYztovkZ-b4qqFO2nNYlUcajt4tS38anFVBQDnRe76J_&amp;wd=&amp;eqid=96e817400003e0e8000000035e97d45c</a>)</p>
<blockquote>
<p> 上述网址实际是404演示文档<br>[这里才是markdown技术文档] （<a href="https://www.baidu.com/link?url=iuW0tM1HbAgwmZYWKTyjqaPoW5Gs01B3JfhEoEl9uKCsDNMcq2mcMimBy7ToCq7PALY-9nLtnVHpkM4Ol0y5WHq0rKERkOpVNBQNjhpqnYC&amp;wd=&amp;eqid=9ef569ae0006853b000000035e97d3ca）" target="_blank" rel="noopener">https://www.baidu.com/link?url=iuW0tM1HbAgwmZYWKTyjqaPoW5Gs01B3JfhEoEl9uKCsDNMcq2mcMimBy7ToCq7PALY-9nLtnVHpkM4Ol0y5WHq0rKERkOpVNBQNjhpqnYC&amp;wd=&amp;eqid=9ef569ae0006853b000000035e97d3ca）</a> </p>
</blockquote>
<h2 id="hexo使用指南"><a href="#hexo使用指南" class="headerlink" title="hexo使用指南"></a>hexo使用指南</h2><p>[Test] (<a href="https://www.baidu.com/link?url=IMNFbDJVOwKF_4H0BWv0GXwqz9HZxuLmSA8N8UNKOrB7g0r8M-Q7o3IOKkFVYYwc4uxF82WFzqxfTeoNtcyTlucKVpLKe8da0y94moJ7N7W&amp;wd=&amp;eqid=cdd5f5820016ad81000000035e97e52d" target="_blank" rel="noopener">https://www.baidu.com/link?url=IMNFbDJVOwKF_4H0BWv0GXwqz9HZxuLmSA8N8UNKOrB7g0r8M-Q7o3IOKkFVYYwc4uxF82WFzqxfTeoNtcyTlucKVpLKe8da0y94moJ7N7W&amp;wd=&amp;eqid=cdd5f5820016ad81000000035e97e52d</a><br>)</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="http://p8.qhimg.com/bdm/768_474_0/t01e467a69210d5812a.jpg" alt="动漫"> </p>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul>
<li>加”*”会变成圆点</li>
<li>加”*”会变成圆点</li>
<li>加”*”会变成圆点 <h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2></li>
</ul>
<ol>
<li>数字.加空格 <h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2></li>
</ol>
<hr>
<p> 三个杠 —</p>
<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;hello-world.md</span><br><span class="line">三个反引号</span><br><span class="line">~~~ </span><br><span class="line">## 表格 </span><br><span class="line">| 表头 | 表头 | 表头 | </span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| 内容 | 内容 | 内容 |</span><br><span class="line">| 内容 | 内容 | 内容 |</span><br><span class="line">| 内容 | 内容 | 内容 |</span><br><span class="line">| 表头 | 表头 | 表头 |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td>内容</td>
<td>内容</td>
</tr>
<tr>
<td>内容</td>
<td>内容</td>
<td>内容</td>
</tr>
<tr>
<td>内容</td>
<td>内容</td>
<td>内容</td>
</tr>
<tr>
<td><del>~</del></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22707008&auto=0&height=66"></iframe>

<h2 id="添加背景音乐教程"><a href="#添加背景音乐教程" class="headerlink" title="添加背景音乐教程"></a>添加背景音乐教程</h2><p>[Test] (<a href="https://www.baidu.com/link?url=RnFXYWc_QLy8MG6Xip5NCISTXlecZEvJ26vp_4S4yVoxrBTp4RE6YMa-ZtTKeH14&amp;wd=&amp;eqid=ebf6a76900002972000000035e97e78d" target="_blank" rel="noopener">https://www.baidu.com/link?url=RnFXYWc_QLy8MG6Xip5NCISTXlecZEvJ26vp_4S4yVoxrBTp4RE6YMa-ZtTKeH14&amp;wd=&amp;eqid=ebf6a76900002972000000035e97e78d</a>) </p>
<h2 id="hexo使用指南-1"><a href="#hexo使用指南-1" class="headerlink" title="hexo使用指南"></a>hexo使用指南</h2><p>[Test] (<a href="https://www.baidu.com/link?url=IMNFbDJVOwKF_4H0BWv0GXwqz9HZxuLmSA8N8UNKOrB7g0r8M-Q7o3IOKkFVYYwc4uxF82WFzqxfTeoNtcyTlucKVpLKe8da0y94moJ7N7W&amp;wd=&amp;eqid=cdd5f5820016ad81000000035e97e52d" target="_blank" rel="noopener">https://www.baidu.com/link?url=IMNFbDJVOwKF_4H0BWv0GXwqz9HZxuLmSA8N8UNKOrB7g0r8M-Q7o3IOKkFVYYwc4uxF82WFzqxfTeoNtcyTlucKVpLKe8da0y94moJ7N7W&amp;wd=&amp;eqid=cdd5f5820016ad81000000035e97e52d</a><br>)</p>
<h2 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h2><p>[Test] (<a href="https://www.baidu.com/link?url=mozNE5Qhx4oh5pUIjWW_m-Fp32URig9jCV-6auEsjerKE9pJgOnl93ylwphCHtUU&amp;wd=&amp;eqid=96e8174000143cb0000000035e97f419" target="_blank" rel="noopener">https://www.baidu.com/link?url=mozNE5Qhx4oh5pUIjWW_m-Fp32URig9jCV-6auEsjerKE9pJgOnl93ylwphCHtUU&amp;wd=&amp;eqid=96e8174000143cb0000000035e97f419</a><br>)</p>
]]></content>
  </entry>
  <entry>
    <title>测试3</title>
    <url>/2020/05/20/%E6%B5%8B%E8%AF%953/</url>
    <content><![CDATA[<hr>
<p>title: My awesome title<br>date: 2016-10-12 18:38:45<br>categories:<br>    - 分类1<br>    - 分类2<br>tags:<br>    - 标签1<br>    - 标签2<br>mp3: <a href="http://domain.com/awesome.mp3" target="_blank" rel="noopener">http://domain.com/awesome.mp3</a><br>cover: <a href="http://domain.com/awesome.jpg" target="_blank" rel="noopener">http://domain.com/awesome.jpg</a></p>
<hr>
<h1 id="最后一次测试，还不行就算了"><a href="#最后一次测试，还不行就算了" class="headerlink" title="最后一次测试，还不行就算了"></a>最后一次测试，还不行就算了</h1><p>无</p>
]]></content>
  </entry>
  <entry>
    <title>比特币毕设</title>
    <url>/2020/04/27/%E7%89%B9%E5%B8%81%E6%AF%95%E8%AE%BE/</url>
    <content><![CDATA[<h1 id="比特币毕设"><a href="#比特币毕设" class="headerlink" title="比特币毕设"></a>比特币毕设</h1><a id="more"></a>

<p>main函数里放所有功能 </p>
<p>打印区块  </p>
<p>生成哈希 </p>
<p>一个区块完了写另一个区块，完成区块链  </p>
<p>区块链完成了，添加区块  </p>
<p>将main函数拆分 </p>
<p>把区块和区块链进行拆分 </p>
<p>在区块里添加功能 </p>
<p>补充区块字段、更新函数  </p>
<p>工具文件 </p>
<p>序列化  </p>
<p> 主函数功能：<br> 生成一个区块、添加一个区块、For循环打印 </p>
<p> 和Block和BlockChain配合  </p>
<hr>
<p> 工作量证明是在区块里的，进行哈希计算 </p>
<p> 挖矿 不断更新哈希函数进行不断计算 </p>
<p> 算哈希，比较Nonce,校验 </p>
<p> 定义一个工作量证明结构 </p>
<p> 目标值 </p>
<p> 创建POW函数 </p>
<p> 将POW功能写人Block </p>
<p> 校验哈希 </p>
<p> 补充字段打印难度 </p>
<hr>
<p> 引入数据库</p>
]]></content>
  </entry>
  <entry>
    <title>循环精灵图</title>
    <url>/2020/04/26/%E7%8E%AF%E7%B2%BE%E7%81%B5%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="好玩的东西"><a href="#好玩的东西" class="headerlink" title="好玩的东西"></a>好玩的东西</h1><a id="more"></a> 

<p>for循环改变精灵图背景位置 </p>
<p>坐标规律 </p>
<p>1、获取元素 </p>
<pre><code>var lis = document . querySelectorAll( &apos;li &apos;
</code></pre><p>2、进行遍历  </p>
<pre><code>for (var i = 0; i &lt; lis.length; i++) {
//让索引号乘以44就是每个li的背景y坐标 index就是我们的y坐标
varindex=i*
44;
lis [i] . style. backgroundPosition = &apos;0 -&apos; + index +
px&apos;;I

</code></pre><p>创建<br>1.documentwrite<br>2. innerHTML<br>3. createElement  </p>
<hr>
<p>增</p>
<ol>
<li>appendChild</li>
<li>insertBefore </li>
</ol>
<hr>
<p>删<br>1.removeChild </p>
<hr>
<p>改<br>主要修改dom的元素属性, dom元素的内容，属性表单的值等<br>1.修改元素属性: src. href, te等<br>2.修改普通元素内容: innerHTML. innerText<br>3.修改表单元素: value. type, disabled等<br>4.修改元素样式: style. className </p>
<hr>
<p>查<br>主要获取查询dom的元素</p>
<ol>
<li>DOM提供的API方法: getElementByld. getElementsByTagName 古老用法不太推荐</li>
<li>H5提供的新方法: querySelector. querySelectorAll 提倡</li>
<li>利用节点操作获取元素:父(parentNode)、孔(children), 兄(previousElementSibling.<br>nextElementSibling)提倡 </li>
</ol>
<hr>
<p>属性操作<br>主要针对于自定义属性。</p>
<ol>
<li>setAtribute :设置dom的属性值</li>
<li>gettribute :得到dom的属性值</li>
<li>removeAttribute移除属性 </li>
</ol>
<hr>
]]></content>
  </entry>
  <entry>
    <title>悬浮窗</title>
    <url>/2020/05/09/%E7%AA%97/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;van-list v-model&#x3D;&quot;loading&quot; :finished&#x3D;&quot;finished&quot; finished-text&#x3D;&quot;没有更多了&quot; @load&#x3D;&quot;onLoad&quot;&gt;</span><br><span class="line">        &lt;van-cell v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item&quot; :title&#x3D;&quot;&#96;我是你的小仙女，爱你第$&#123;item&#125;遍&#96;&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;van-list&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;float-icons padding&#x3D;&quot;6 10 60 10&quot; class&#x3D;&quot;icons-warp&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;float-icon-item&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;images&#x2F;home-icon.png&quot; alt&#x3D;&quot;&quot; @click&#x3D;&quot;handleIcons(&#39;&#x2F;home&#39;)&quot; &#x2F;&gt;</span><br><span class="line">        &lt;span&gt;首页&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;float-icon-item&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;images&#x2F;cart-icon.png&quot; alt&#x3D;&quot;&quot; @click&#x3D;&quot;handleIcons(&#39;&#x2F;cart&#39;)&quot; &#x2F;&gt;</span><br><span class="line">        &lt;span&gt;购物车&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;float-icons&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import FloatIcons from &#39;@&#x2F;components&#x2F;s-icons&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Icons&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#39;float-icons&#39;: FloatIcons</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [],</span><br><span class="line">      loading: false,</span><br><span class="line">      finished: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#39;222&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    onLoad() &#123;</span><br><span class="line">      &#x2F;&#x2F; 异步更新数据</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        for (let i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">          this.list.push(this.list.length + 1)</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 加载状态结束</span><br><span class="line">        this.loading &#x3D; false</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 数据全部加载完成</span><br><span class="line">        if (this.list.length &gt;&#x3D; 40) &#123;</span><br><span class="line">          this.finished &#x3D; true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, 500)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 点击按钮</span><br><span class="line">    handleIcons(router) &#123;</span><br><span class="line">      console.log(&#39;router&#39;, router)</span><br><span class="line">      this.$router.push(router)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">  background: red;</span><br><span class="line">  width: 375px;</span><br><span class="line">&#125;</span><br><span class="line">.icons-warp &#123;</span><br><span class="line">  border-radius: 25px;</span><br><span class="line">  .float-icon-item &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    img &#123;</span><br><span class="line">      width: 25px;</span><br><span class="line">      height: 25px;</span><br><span class="line">      margin-bottom: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    span &#123;</span><br><span class="line">      font-size: 9px;</span><br><span class="line">      color: #666666;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>绪论</title>
    <url>/2020/04/29/%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><a id="more"></a> 
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本章主要介绍了基于工作量证明机制的区块链挖矿算法和以太坊智能合约的研究<br>目的和意义，其次对工作量证明机制的挖矿算法和以太坊智能合约的国内外研究现状进<br>行了一个详细的概述，在本章的最后介绍了本论文各个章节的主要内容。 </p>
<h2 id="1-1-研究的目的（研究工作的背景）和意义"><a href="#1-1-研究的目的（研究工作的背景）和意义" class="headerlink" title="1.1 研究的目的（研究工作的背景）和意义"></a>1.1 研究的目的（研究工作的背景）和意义</h2><p><strong>简单介绍区块链大的体系即可</strong></p>
<p>区块链是使用加密算法、分布式账本、共识机制等技术来构造信任的新的应<br>用模式，其本身的存储数据、防篡改、保护隐私、数字化合约等核心特征在金融<br>领域为代表的应用场景，有着革命性的意义。区块链技术背书下，传统应用模式<br>发生了颠覆性创新，从中心化服务器集中管理和维护数据的模式，转换为去中心<br>化分布式节点，节点之间在共识机制协议下，进行同步和更新数据的应用模式凹。<br>技术保障了个人隐私的安全和数据的透明不可篡改特性，将很有可能在全球各行<br>业引发一-场由技术升级变化带动产业升级变化的改革[4]。<br>区块链技术重新构造了交易双方信任的方式，使用点对点共识同步账本技术创<br>建了信任的媒介，使得交易的双方在传递价值的过程中去除了对第三方信任机构<br>的依赖，使用技术保障信任，很大程度上提高了价值交互过程中结算的效率;公<br>钥-私钥账户体系，极大程度上保护了用户隐私;公开透明的分布式账本技术降低<br>了传统中心化数据管理的成本，并且避免了数据泄露风险，改变了金融应用模式，<br>降低了价值交互系统的成本，区块链技术被认为是是一项技术革命。<br>区块链现阶段面临诸多方面的安全挑战，大致可将攻击类型分为两种，一种<br>是对区块链平台自身技术的攻击，另外一种对区块链平台上的部署的智能合约的<br>攻击。区块链自身技术包括加密算法、点对点共识网络、共识机制等技术等，其<br>中的加密算法技术的公钥算法和哈希加密算法，其安全性来源于数学难度，存在<br>可破解的可能性;点对点共识节点网络，存在DDoS (Distributed Denial of Service,<br>分布式拒绝服务)攻击风险;共识机制都存在51%攻击风险，即控制者如果控制<br>全网算力的一半以上,则可以随意的修改账本数据[5]。但是对区块链本身技术的攻<br>击，存在非常大的难度，需要消耗大量的资源。然而，对区块链平台上部署的智能合约的<br>攻击。区块链自身技术包括加密算法、点对点共识网络、共识机制等技术等，其<br>中的加密算法技术的公钥算法和哈希加密算法，其安全性来源于数学难度，存在<br>可破解的可能性;点对点共识节点网络，存在DDoS (Distributed Denial of Service,<br>分布式拒绝服务)攻击风险;共识机制都存在51%攻击风险，即控制者如果控制<br>全网算力的一-半以上，则可以随意的修改账本数据[5]。但是对区块链本身技术的攻<br>击，存在非常大的难度，需要消耗大量的资源。然而，对区块链平台上部署的智<br>能合约的攻击却极其容易，智能合约代码中如果存在漏洞，基于其上开发的去中<br>心化的DApp (Decentralized Application,分布式应用) [B]， 将会从内部土崩瓦解。<br>事实上，因为区块链智能合约程序代码漏洞造成的安全问题屡次出现，由于智能<br>合约不可篡改的特性，代码漏洞安全问题往往带来了巨额的财产损失。为了防患<br>于未然，提前对智能合约的安全验证工作必不可少。<br>程序代码的模型检查技术是–种面向软硬件的、基于规约开发以及验证数学的<br>方法。通过形式化的程序逻辑(Program Logic)，来证明- -个智能合约程序(Code)<br>是否满足已给定的形式化规范(Formal Specification)。在规范的基础上，证明智能<br>合约的行为始终满足–些高层性质(High-levelProperty)，并且通过显式的证明<br>(ProofObect)来使用户确信验证结果的正确性凹。简而言之，模型检查动态的运<br>行程序代码，使用数学表达式、逻辑推理、符号执行等方法来验证- - 个系统的是.<br>否存在缺陷或是否符合- -些需求属性， 对漏洞模型进行缺陷代码检查，从而分析<br>程序代码安全属性。代码的静态检查则是是指不用动态执行程序，只是对程序代<br>币的规范、逻辑语法规则、语句结构、过程、接口做检查和查阅，可以检查出编<br>译:器无法报出的缺陷代码，找到隐藏的程序错误。代码静态检查可以自动化的对<br>程序代码进行分析，并快速定位代码隐藏错误和缺陷，可帮助代码开发者减少代<br>码逐行检查花费时间，帮助开发者更专注于分析和解决代码设计权限，提高软件<br>的可靠性(1]。<br>因此可以使用模型检查和静态代码检查技术结合的方式,开发区块链智能合约<br>的漏洞安全检查工具，自动化的分析和检查合约代码的漏洞代码，给智能合约提<br>供安全开发保驾护航，为推动开发安全DApp应用和区块链生态的安全发展，有<br>着重要的意义。 </p>
<p>20世纪后半叶，随着互联网基础设施和软硬件的发展，人类传播信息效率出现了爆<br>发式提升，由此带来了各个行业的迅速发展，人类进入了信息时代。区块链的基础知识<br>均诞生于，上个世纪，其去中心化、不可篡改的特性是由多种技术组合而成，区块链技术<br>其实是分布式存储、P2P网络和机密算法的集合体。区块链是比特币的基础技术，随着<br>2009年的问世,区块链的技术价值逐渐被人所熟知并认可。虽然现在的互联网技术可以<br>近乎完美的解决信息传递的问题，但是由于中心化的特点，仍存在一- 定的安全性问题。<br>中心化的网络结构虽然能最大限度的提高效率，但是攻击者可以对中心节点发动DDOS.<br>攻击。同时，传统的价值分发或是价值转移方式均是通过中心化机构进行主导，但是区<br>块链的诞生却开启了一个崭新的新时代。区块链的出现解决了在不可信网络中进行价值<br>传播的问题。因此，区块链可以在多个不可信网络节点中传播交易信息。由于区块链具<br>有去中心化和不可篡改的特点，区块链被认为可以在多种实际的业务场景中，用来建立<br>信息，提升透明性，可靠性与安全性。区块链目前已经不止应用于电子现金中，在共享<br>经济，食品安全，知识产权保护，隐私保护，慈善等诸多领域均有巨大的应用潜力。并<br>且，区块链在与云计算、人工智能、物联网等领域的结合也将带来巨大的发展机遇。<br>虽然区块链可以应用于多个方面，但是目前仍然存在较大的问题。大量的冗余数据<br>和全网公开访问的特点给实际应用中带来了效率低下和隐私泄露等问题。并且，在区块<br>链世界中，私钥就是资产所有的唯–凭证，因此私钥泄露问题仍然是区块链安全性中影<br>响较大的因素之一。私钥可以用来对交易进行签名，丢失了私钥也就丧失了账户的控制<br>权。对于以工作量证明为共识机制的区块链系统，其中一个导致安全性问题的因素是挖<br>矿算法的相同导致的攻击问题。在以工作量证明为共识机制的区块链系统中，资产的发<br>放均是由矿工通过解决一.定的数学难题来解决。用户发起交易也需要矿工进行验证，因<br>此，区块链的安全性在–定程度上是掌握在矿工手上。挖矿算法的安全性直接影响了整<br>个区块链系统的安全性。因此，-.般来说，为了防止现有算力对新的区块链网络发起的<br>攻击，新的区块链网络–般选择不同于以往的挖矿算法。</p>
<p>比特币的出现虽然在–定程度上解决了网络不可信的问题，但是因为比特币脚本实<br>现的功能有限，无法适应比较复杂的业务场景，以太坊就应运而生了。以太坊的最大特<br>点就是支持智能合约。智能合约的出现为去中心化应用奠定了基础。以太坊智能合约是<br>一个崭新的区块链平台，任何人都可以在以太坊上建立和使用智能合约。基于区块链的<br>特点，以太坊数据可以全网访问，而且以太坊智能合约的开发语言是图灵完备的，这为<br>去中心化应用的业务逻辑设计提供了几乎无限种可能。以太坊的智能合约很灵活，如果<br>在此基础上开发公钥证书,那么中心化的证书发布机构易受攻击这个问题将会得到解决。 </p>
<h3 id="区块链的技术意义"><a href="#区块链的技术意义" class="headerlink" title="区块链的技术意义"></a><strong>区块链的技术意义</strong></h3><p>1数据不可篡改性 </p>
<p>为什么数据不可篡改呢?首先区块链系统不是:个中心化的软件设施;比如说比特币，如果是一个单机软件， 或者说是被某-个人<br>家机构控制的，那肯定是谈不上数据不可篡改的<br>I美李在技术上是不能保证的直而比特币是3个2P的对等网络结构软件:没有服<br>居，数据是每个节点各直在储一份，自己最多把直己<br>g上的数据改掉，然而只是这样的话是得不到整个网络的承认的，无法被其他<br>节点验证通过，修改后的数据也就无法被打包到区块中了(51%攻击什么的暂且不提， 这是另外一个话题了2。不但如此<br>据被打包进区块后，后续又连续确认了多个区块，比如数据是被打包进5号区块的，现在整个区块链账查的区块高度是10号，那么想要更<br>改掉当时的数据的话就更难了因为这个时候不单 单是要改掉号区珙的数据，后续的区块都要变动， 因为区块之间是通过区块哈希连接<br>起来的，更改了某个区块的数据后，后续的区块就都要更改了，因此想要算改的难度就更大了。有这个特点，在很多领域内就很有意又<br>了，比如说金融行业的业务数据、公众政务数据、审计数据等，这些行业的数据都是有严格防篡改要求的。 </p>
<p>2.分布式存储 </p>
<p>对于一个软件系统，一个零薯 保存数据的软件系统，最担心的是什省?毫无疑问是数握香朱。传统的软件设计架构，再怎么考虑数<br>据备份惑煮数据库集群等，也总是不能很好地保证数据的安全，票么就是需要运营煮投入大量数据备份设备惑者数据库集群诊施等。无<br>论如何也不是一个廉价简约的方案。在区块链系统中，每个运行的节点都拥有三份完整的数据副本,这样的设计不但使得数据存储避兔<br>了里故障点的问题;还可以让每个节点能够独立地验证和检索数据，大大增加了整个系统的可靠性，节点之间的数据副本还可以互相保<br>持同步;并使用类似梅克尔树这样的技术结构像证数据的完整性和一致性。这种芬布式的结构很适合用在那些面向公众的服务型教件设<br>施上，避免集中而昂贵的专用服务器配备，也具备相当良好的数据安全性。 </p>
<p>3.匿名性 </p>
<p>我们在使用传统的服务软件时，通當都是需要注册-企用户各，绑定手机号、邮箱仕么的，为了加强用户识别的准确性;<br>还会<br>然而在区块链系统中 ，冒煎几乎所有的区块链产品都是使用所谓的地址来标识用户的， 仅此而<br>需要提供其<br>任何能标识出用户身份的信，息，地址通常是通过公开密钥算法生成的公钥转换而来的，这通常就是:串如乱码一 般的字符<br>事，因此，虽然比特市、以太坊等这些公涯系统的数据是完全公开透明的，可我们却并不能知道背后的操作者是谁，不但如此。每个便<br>用者还可以创建任意数量的地址:只要你愿意，可以每二次都便用不同的地址来进行转账等各种操作，也可以将自己的资产分散在众多<br>的地址，上，这就实现了一种用户身份的匿名性。那么，匿名性有什么用途呢?我们知道，<br>茬很多场告，如转账支行，比如收款、创建链<br>资产李，这些都是<br>比较隐私的行为，匿名性在很天程厦上可以满足这些隐私安全的需求，不但是对个人，对于企业这样的商业环境，<br>也是有同样的需求的。 </p>
<p>4.价值传递 </p>
<p>这大概是区块链系统中最重要的一个特性了e所谓俭值，就是泛指各种资产比如货币资产、 信用资产 、版权资产以及 各种实物资<br>产，(如黄金等)，所有这些资产在本质上其实都是“种信用或者说信任。比如，货币，我们之所以愿意通过劳动来获取货币，是因为相<br>言使用这<br>货市可以交换到需要的商品，这种信住是电政府担保的，也因为有这种信任的担保，出现了各种本身不具备太多价值但是却<br>对带有信用价值的资产形式，比如纸市、支票、汇票等，还有版权，一首歌曲、蝠画、 一本书等都有版权，版权也是一种资产，是具<br>有价值<br>的，这个价真从何而来，版权的背后票创作著的劳动投入<br>就是伶值<br>通过法律保护这种价值，因此就能够在市场上流<br>转传递了i在这些价值资产的转移过程中都需要二个重票的条件，那就是信勇的保证e我们需要政府、 银行。担保公司等这些第 三万<br>的机构来提供信用保证，只有在这些信用保证的前提下，我们才能完成各种交易。即便是互联网发展起来后，虽然可以通过互联网方便<br>传输各种数据7图片、视频、音乐等)但是这些数据的价值 仍然需要这些第三方来保证三互联网本身并不具 备价值保护的机制，而如<br>果要在全世界范围内进行交易那就更麻烦了.涉及不同的法律,不同的价值认走规则，不同的支付方式等，那就得需要更多的机构来提<br>供交易的保证，代价昂贵且相当麻烦。区块链能改变这种情况吗?<br>我们先看比特币这个例子比特市是一 种数字资产;它是由比特币软件组成的网络来维护的， 在这个网络中e不需要 其他的第三，<br>方，自己可以根据规则发行比特币，并真能确保发行的比特市是具有价值的(工作量证明)，而这种价值的认定是通过网络中所有的节<br>点来自动进行验证的，节点之间达成共识就算是认可了整个过程 都是直成一个体系来运行<br>,人们在转账交易比特市的时候，价值就<br>叔、债权琴辐是昆特币，那公查抢的资<br>发生了传递，而如果将其他的资产比如股票，资同、版相<br>那台<br>资产也就能方便地进行值递转稳了我项可<br>以发现，区块链系统是可以自己创造信任机制的，在这样-一个无需第三方的信任环境中，可以大天简化备种资产交易的过程，降低交易<br>成本，并宜由于区块链系统是二个分布式的系统，节点可以遍布全球，那就可以实现无边界的价值传递了。 </p>
<p>5.自动网络共识 </p>
<p>日常生活中，我们有很多事情需要双方或者多方达成共识，比如签订一份买卖合国，买入一笔债权，担保一份交易或者购房按期还<br>贷、众筹资金管理等，在传统的模式中，这些需求是如何提供服务的呢?比如签订合同，那就需要双方签名，必要时还需要律师审阅;<br>公证处公证，比如担保交易，除了签名外还需要提供资产余额证明，比如购房还贷需要有收入证明同时也需要还贷者签名 i再比如众<br>筹的资金管理;就更复杂了，需要记录每个参 与者的资金项，还需要跟踪众筹资金的流向。凡此种种，这些事情在达成共识的过程中，<br>都需要做各种确认。<br>这种共识可以通过网络来自动地进行吗?如果可以，那该省多少事啊。我们还是来看比特币的例子:比特币从发行到转账交易，都<br>是电网络中的节点夏动进行身份认证和书系列的检查的，检查通过后就达成7网络共识，.等交易就算是确定了，各个不同的节点之间<br>达成共识的过程不再需要我们去签名，去按指纹或者去打一份什么证明了，因为每个节点都遵守一-份共同的约定规则，只要一项交易符<br>合所直的约定规则就能被确认，每个节点都确认，大家就-致认同了。那么:除了比特币这种转账交易可以自动达成共识外，其他的事<br>务也可以吗?当然是可么的，上述提到的各种商业或者金融活动，都可以通过区块链上的智能合约来实现。区块链系统中的各个节点独<br>立地验证智能合约，共同达成共识，如果能将这种机制莅用到商业、金融、政务等领域，那将提高多少效率啊。<br>6.可编程合约<br>可编程合约。也就是智能合约的意思，以比特币为例，如果用一-种更加技术的称呼来描述比特币的话,可以叫作可编程加密数字货<br>币，这个可编程是仟么意思呢?在比特币系统中，并不是像银行账户-样，将金额存储在某个账户下就表明一笔资产是某个账户拥有<br>的，而是使用了二种脚本程序，通过脚本程序解锁( 解锁脚本)和锁定( 锁定聊本)一笔资产，简单地说，就是让资声具备更强的编程<br>可控能力，拥有密钥的用户可以提参自己的签名信息让脚本来验证身份;以证明自己对资产的所有权，并且可以通过程序设定对资产的<br>管理万式，比如设定一笔资产需要多个天共同签名才能被转移或著需要达到某个条件的时候才能被使用等;这种可配置、可控制的思想<br>就是可编程合约的思想。比特市展示了这种新颖的思路，在后续的发展中，以太坊扩展了这种思路，使可编程合约进一步发扬光大，不<br>但支持加密数字货币，还支持更复杂的金融与商业合约编程，比如众筹、担保等。这种合药使用迪本语言进行开发;部署到区块链后就<br>很难更改，也就是所谓的代码即法律o区块链系统具有数据的不可篡改性价值传递能力， 加上可编程合药， 就能完全地支持商业环境<br>下的各种合约需求，无论合约中有哪些条条框框，写在纸上不如写在代码中，部署在区块链上，公正透明而且能够刚性执行，更主要的<br>是，这样的合约可以覆盖全世界，因为脚本编写的合药是不分国界的。</p>
<h2 id="1-2国内外研究发展趋势"><a href="#1-2国内外研究发展趋势" class="headerlink" title="1.2国内外研究发展趋势"></a>1.2国内外研究发展趋势</h2><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><h3 id="挖矿算法的发展"><a href="#挖矿算法的发展" class="headerlink" title="挖矿算法的发展"></a>挖矿算法的发展</h3><p>1993年，Cynthia Dwork和Moni NaorNaor首次提出使用代价函数对抗垃圾邮件的<br>攻击凹。1997年，AdamBack首次提出了Hashcash,该方案利用哈希函数作为代价函数<br>解决垃圾邮件和DOS攻击问题2。虽然Hashcash并不能彻底阻断攻击者对邮件系统的<br>攻击，只是大幅提高了攻击者的成本，但是它给中本聪以重要启发，成了之后比特币<br>POW的核心技术之一。1999年，Markus Jakobsson和Ari Juels才正式提出“Proof of W ork””<br>这个词B。2008 年，随着比特币白皮书的发布，人们重新认识到POW在解决去中心化<br>共识问题上有着重要意义国。<br>比特币采用挖矿算法是SHA256散列函数，该函数拥有较好的硬件实时性能[5]。但<br>是，因为SHA256挖矿算法可以在一-定程度上优化，可能会留下一定的安全隐患6]。2011<br>年，莱特币为了改善比特币确认时间短的问题,将比特币的挖矿间隔等参数进行更改发<br>行了莱特币凹。为了防止可能的51%攻击，菜特币的挖矿算法采用了与比特币完全不同<br>的Scrypt算法凹。Scrypt算法在挖矿过程中需要生成128KB的缓存，这样就强制要求矿<br>机拥有较大的缓存空间，在一定程度上能够降低专用矿机的优化效果。2013年,Larimer<br>提出了一种可以抵抗ASIC矿机的新算法9。2015年.上线的以太坊采用了相同的抗专用<br>矿机策略，采用了名为Ethash的挖矿算法10。这种挖矿算法在挖矿过程中需要占用1GB<br>以上的内存空间，使得专用电路矿机挖矿速率并不比显卡矿机有明显优势。2015 年<br>Tromp提出了一-种基于图的POW算法，这种算法首先建立一个巨大的随机图数据结构，<br>然后在这个图中找到一个最小环完成工作量证明1。2016年，AlexBiryukov和Dmitry<br>Khovratovich基于广义生日悖论问题而提出了一种新的挖矿算法Equihash2。之后，该<br>算法被应用在Zcash上131 。 </p>
<p>区块链的挖矿过程其实对社会资源产生了巨大的浪费，每年需要浪费大量的电力资<br>源进行挖矿141。2013年，旨在寻找素数的币种Primecoin诞生了1。素数币研发团队想<br>要将数字货币的挖矿过程利用起来，促进数学的发展。但由于素数分布的不均匀，使得<br>挖矿难度也越来越大。</p>
<h3 id="以太坊智能合约的发展"><a href="#以太坊智能合约的发展" class="headerlink" title="以太坊智能合约的发展"></a>以太坊智能合约的发展</h3><p>随着比特币自2009年1月推出以来，去中心化数字货币越来越受到关注。用户在<br>网络上使用数字货币无需信任可信第三方。虽然区块链- -开始是作为点对点支付手段，<br>但是之后却扮演者越来越重要的角色，其中一个典型的代表就是2015年诞生的以太坊<br>智能合约10]。按照NickSzabo的定义，智能合约应该是可以运行于区块链上，并且其执<br>行应该由全网的共识协议所决定6]。以太坊智能合约有着广泛的应用，例如去中心化自<br>治组织，该组织通过选出几个代表性的节点进行投票来表决相关决议卫。到目前为止，<br>接近20000个以太坊智能合约已经部署到以太坊区块链上181。2016年，AhmedKosba提<br>出了一种隐私保护智能合约，这种合约并不存储明文的交易信息，可以在一定程度上包<br>含用户的隐私安全凹。Clack 提出了一种智能合约模板，规范了智能合约设计中的几个<br>要求191。以太坊智能合约可以用于在线身份认证I、在线投票21、物联网的安全性保障<br>上1231.</p>
<h3 id="公钥证书的发展"><a href="#公钥证书的发展" class="headerlink" title="公钥证书的发展"></a>公钥证书的发展</h3><p>上个世纪70年代，Diffie 和Helman首次提出了公钥密码学的相关概念[241。在公钥<br>密码学中，加密秘钥和解密密钥是完全不同的，但又是紧密相关的一对。 通信双方需要<br>通信时，发送方需要使用接收方的公钥进行加密传输，而接收方需要使用自己的私钥进<br>行解密。这样就避免了传统的对称密码学中的密钥分发步骤。公钥密码学的概念提出之<br>后，由于其安全性较高，得以很快发展。之后，研究人员根据不同的数学模型提出了不<br>同的公钥密码算法，例如: RSA算法251、背包算法[261、Rabin算法2、EIGamal算法[28]、<br>McEliece算法129]、LUC算法130]、椭圆曲线密码系统B11、DSS签名算法21等。之后，为<br>了适应不同的应用环境，研究人员又分别提出了盲签名算法3、门限密码算法4、代理<br>签名密码算法51、群签名算法361、不可抵赖签名算法31、多重签名算法[381等。<br>公钥密码学的特点之- -就是密码算法是公开的，通信双方的公钥也是公开的，只有<br>私钥是保密的。但是因为复杂的网络环境中，保障公钥传输的安全性成为研究人员关注<br>的热点。其中最常用的解决方案就是采用公钥证书来保障公钥使用过程中的安全性。<br>Kohnfelder就首次提出了公钥证书的概念9。用户需要向证书授权机构( Certificate<br>Authority, CA)申请获得证书。证书里记录了用户的个人身份信息和公钥信息，并有证 </p>
<p>书授权机构的签名。X 509是基于公钥密码体制和数字签名的服务[401。X.509 的核心是<br>与每个用户相关的公钥证书。公钥基础设施(PublicKeyInfrastructure,PKI)是由硬件、<br>软件、人、策略和程序构成的一- 整套体系1411。之后PKIX (Public Key Infrastructure X .509)<br>工作组在X509的基础上建立了一个可以用来构建网络认证体系的基本模型。RFC2510<br>又定义了证书管理协议，使得每个管理任务都通过特定协议交换来明确识别42]。<br>RFC2797又定义了认证管理消息封装的方法[431。</p>
<h3 id="默克尔树的发展"><a href="#默克尔树的发展" class="headerlink" title="默克尔树的发展"></a>默克尔树的发展</h3><p>默克尔树是由RalphMerkle提出的-一种用于验证数据完整性的数据结构4]。默克尔.<br>树的叶子节点通常存储数据块或者单个文件的哈希值，而非叶子节点则存储的是其子节<br>点连接的哈希值。默克尔树的出现为数据完整性验证提供了-一个新的解决思路。同时默<br>克尔树也应用于Web服务器中对HTTP的响应和验证[45]。2008 年，Coelho 提出了一种<br>基于默克尔树的难度验证算法，该算法在解决特定难题的时间花费比较稳定，并且无输<br>入参数461。2007年，PiotrBerman提出了一种可以优化默克尔树遍历的新算法，可以有<br>效的降低在遍历过程中的时间复杂度和空间复杂度41,</p>
<h2 id="1-3-研究的主要内容"><a href="#1-3-研究的主要内容" class="headerlink" title="1.3 研究的主要内容"></a>1.3 研究的主要内容</h2><p>本文根据区块链中的研究现状和发展趋势，采用工作量证明机制的区块链设计了不.<br>同的挖矿算法，还基于以太坊智能合约设计了一种新的公钥证书发布方案。本文的主要<br>研究内容如下: </p>
<p>( 1)利用默克尔树构建过程的特点提出了- -种基于默克尔树的POW挖矿算法。本.<br>算法利用默克尔树的结构特点设计了一种随机访问默克尔树每层节点的机制，这就使得<br>挖矿过程中必须要存储完整的默克尔树。为了挖矿算法的可靠性，也分析了默克尔树深<br>度的取值范围。该算法对于轻节点验证来说，只需要消耗较少的内存资源就能完成对区<br>块合法性的验证。最后，还在计算机上模拟了单次挖矿过程，实验数据和理论分析结果<br>完全一致。 </p>
<p>(2)利用布隆过滤器的一-种简化形式提出了–种基于简化布隆过滤器的POW挖<br>矿算法。布隆过滤器的数组元素存储的是伪随机数对应的个数。类似于-一个随机组合问<br>题，本方案设计的工作量证明挖矿算法成功挖矿需要消耗较大的内存资源。但是，对于<br>轻节点验证来说，工作量证明的验证工作却可以消耗较少的内存。这个特点一定程度上<br>满足了工作量证明挖矿算法的特点。. </p>
<p>(3)利用以太坊智能合约的去中心化特点，将传统的公钥证书发放方式转换到以<br>太坊智能合约上发布。用户和证书发布机构能够在复杂不稳定的网络环境中安全地传输<br>公钥证书。同时，又能隐藏用户和证书发布机构真实的网络位置，能在一定程度.上保障<br>隐私性。同时，因为以太坊的工作量证明机制的安全性，攻击者对发证机构和用户的攻<br>击都需要巨大的计算资源。</p>
<h3 id="1-4-本文的文章结构（论文结构）"><a href="#1-4-本文的文章结构（论文结构）" class="headerlink" title="1.4 本文的文章结构（论文结构）"></a>1.4 本文的文章结构（论文结构）</h3><p>本章介绍了基于工作量证明机制的区块链挖矿算法的研究目的和意义，和以太坊智<br>能合约的应用前景，以及本文的研究内容及章节安排。<br>第2章介绍了区块链技术和应用过程中所涉及的相关区块链基础知识，其中主要介<br>绍了单向散列函数，51%攻击，典型工作量证明机制下的挖矿算法过程，以及挖矿设备.<br>的进化历程。<br>第3章介绍了默克尔树的构造过程和验证过程，分析了默克尔树的特点。根据默克<br>尔树的构造特点，提出了基于默克尔树的POW挖矿算法。该挖矿算法在构造挖矿默克<br>尔树的过程中需要生成大量的伪随机数，这个伪随机数填充到默克尔树的叶子节点中,.<br>继而逐层构建默克尔树。基于此，通过每层随机选择-一个节点，进而在挖矿过程中需要 </p>
<p>占用大量的内存空间。经过分析，该方案在工作量验证过程中的时间复杂度和空间复杂<br>度小于单次挖矿的过程。因此，该方案满足工作量证明挖矿算法的要求。<br>第4章介绍了布隆过滤器的的特点，分析了布隆过滤器的特点。根据布隆过滤器的<br>特点，提出了基于布隆过滤器的POW挖矿算法。该挖矿算法在挖矿过程中根据一定的<br>概率挖矿成功。经过分析，该方案在工作量轻节点验证过程中的时间复杂度和空间复杂<br>度均小于单次挖矿的过程。因此，该方案可以作为工作量证明挖矿算法。<br>第5章介绍了以太坊智能合约的特点，介绍了传统的公钥证书发放过程可能产生的<br>问题。结合以太坊智能合约去中心化的特点，在此基础上提出了–种新的公钥证书发放<br>方案。用户和证书发布机构可以在不安全的网络环境中安全的传输用户证书。并且，使<br>用区块链登记公钥证书，可以有效的隐藏用户和证书发布机构的位置，保护隐私，降低<br>攻击者攻击的概率。<br>第.6章总结了全文的工作，并对未来工作进行展望。</p>
]]></content>
  </entry>
  <entry>
    <title>拖动菜单显示列表</title>
    <url>/2020/05/09/%E8%8F%9C%E5%8D%95%E6%98%BE%E7%A4%BA%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    &#x2F;&#x2F; 异步更新数据</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      for (let i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">        this.list.push(this.list.length + 1)</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 加载状态结束</span><br><span class="line">      this.loading &#x3D; false</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 数据全部加载完成</span><br><span class="line">      if (this.list.length &gt;&#x3D; 210) &#123;</span><br><span class="line">        this.finished &#x3D; true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 500)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>路由跳转</title>
    <url>/2020/05/08/%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> &#x2F;&#x2F; 字符串</span><br><span class="line">this.$router.push(&#39;&#x2F;home&#x2F;first&#39;)</span><br><span class="line">&#x2F;&#x2F; 对象</span><br><span class="line">this.$router.push(&#123; path: &#39;&#x2F;home&#x2F;first&#39; &#125;)</span><br><span class="line">&#x2F;&#x2F; 命名的路由</span><br><span class="line">this.$router.push(&#123; name: &#39;home&#39;, params: &#123; userId: wise &#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>底部导航栏</title>
    <url>/2020/05/09/%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
    <content><![CDATA[<h1 id="底部导航栏"><a href="#底部导航栏" class="headerlink" title="底部导航栏"></a>底部导航栏</h1><pre><code>&lt;!-- 底部导航栏 --&gt;
&lt;van-tabbar route
  v-model=&quot;active&quot;
  active-color=&quot;#f44&quot;&gt;
  &lt;van-tabbar-item replace
    to=&quot;/home&quot;
    icon=&quot;home-o&quot;&gt;
    首页
  &lt;/van-tabbar-item&gt;
  &lt;van-tabbar-item replace
    to=&quot;/cart&quot;
    icon=&quot;cart-o&quot;&gt;
    购物车
  &lt;/van-tabbar-item&gt;
  &lt;van-tabbar-item replace
    to=&quot;/user&quot;
    icon=&quot;manager-o&quot;&gt;
    我的
  &lt;/van-tabbar-item&gt;
&lt;/van-tabbar&gt;</code></pre>]]></content>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/2020/04/21/Spring-Boot/</url>
    <content><![CDATA[<h1 id="spring学习"><a href="#spring学习" class="headerlink" title="spring学习"></a>spring学习</h1><a id="more"></a> 


<p>title: springboot</p>
<!--more--> 

<pre><code>//日志的级别；
//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error
//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效
logger.trace(&quot;这是trace日志...&quot;);
logger.debug(&quot;这是debug日志...&quot;);
//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别
logger.info(&quot;这是info日志...&quot;);
logger.warn(&quot;这是warn日志...&quot;);
logger.error(&quot;这是error日志...&quot;);</code></pre><h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote>
<p>简化Spring应用开发的一个框架；</p>
<p>整个Spring技术栈的一个大整合；</p>
<p>J2EE开发的一站式解决方案；</p>
</blockquote>
<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p>
<h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/" target="_blank" rel="noopener">http://www.gulixueyuan.com/</a> 谷粒学院</p>
<p>环境约束</p>
<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>
<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>
<p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>
<p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p>
<p>统一环境；</p>
<h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129151045.png" alt="idea设置"></p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129151112.png" alt="images/"></p>
<h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>
<h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>
<h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure>

<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-boot-starter</strong>-==web==：</p>
<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">      @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>
<p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p>
<p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p>
<p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>
<p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>
<p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p>
<p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>
<p>​        给容器中导入组件？</p>
<p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>
<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129224104.png" alt="自动配置类"></p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>
<p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p>
<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>
<p>​        </p>
<p>==Spring注解版（谷粒学院）==</p>
<h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>
<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>
<p>默认生成的Spring Boot项目；</p>
<ul>
<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>
<li>resources文件夹中目录结构<ul>
<li>static：保存所有的静态资源； js css  images；</li>
<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>
<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
<h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr>
<h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<p>•application.properties</p>
<p>•application.yml</p>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain’t Markup Language）</p>
<p>​    YAML  A Markup Language：是一个标记语言</p>
<p>​    YAML   isn’t Markup Language：不是一个标记语言；</p>
<p>标记语言：</p>
<p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>
<p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>
<p>​    YAML：配置例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>​    XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>属性和值也是大小写敏感；</p>
<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p>
<p>​        字符串默认不用加上单引号或者双引号；</p>
<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>
<p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p>
<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p>
<h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p>
<p>​        对象还是k: v的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">		<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>



<h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>javaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>



<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png" alt="idea配置乱码"></p>
<h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>
<h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>



<h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>



<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>



<p>不来编写Spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>
<p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p>
<p>2、使用<strong>@Bean</strong>给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##4、配置文件占位符</p>
<h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>



<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>





<h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p>
<p>​    2、命令行：</p>
<p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>
<p>​        可以直接在测试的时候，配置传入命令行参数</p>
<p>​    3、虚拟机参数；</p>
<p>​        -Dspring.profiles.active=dev</p>
<h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>
<p>–file:./config/</p>
<p>–file:./</p>
<p>–classpath:/config/</p>
<p>–classpath:/</p>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>
<p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>
<h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p>
<p><strong>1.命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
<p>多个配置用空格分开； –配置项=值</p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的random.*属性值</p>
<p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p>
<p>==<strong>优先加载带profile</strong>==</p>
<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p>==<strong>再来加载不带profile</strong>==</p>
<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p>
<h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p>
<h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>
<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>
<ul>
<li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li>
</ul>
<ul>
<li><p>可以查看selectImports()方法的内容；</p>
</li>
<li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</String></p>
<ul>
<li><pre><code class="java">SpringFactoriesLoader.loadFactoryNames()
扫描所有jar包类路径下  META-INF/spring.factories
把扫描到的这些文件的内容包装成properties对象
从properties中获取到EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>类（类名）对应的值，然后把他们添加在容器中</span>
<span class="class"></span>
<span class="class"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    ​</span><br><span class="line"></span><br><span class="line">**&#x3D;&#x3D;将 类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；&#x3D;&#x3D;**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;properties</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></span>
<span class="class"></span></code></pre>
</li>
</ul>
</li>
</ul>
<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties<span class="class">.<span class="keyword">class</span>)  //启动指定类的<span class="title">ConfigurationProperties</span>功能；将配置文件中对应的值和<span class="title">HttpEncodingProperties</span>绑定起来；并把<span class="title">HttpEncodingProperties</span>加入到<span class="title">ioc</span>容器中</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span> //<span class="title">Spring</span>底层@<span class="title">Conditional</span>注解（<span class="title">Spring</span>注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是<span class="title">web</span>应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">CharacterEncodingFilter</span>.<span class="title">class</span>)  //判断当前项目有没有这个类<span class="title">CharacterEncodingFilter</span>；<span class="title">SpringMVC</span>中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>) //判断容器没有这个组件？</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>





<p><strong>精髓：</strong></p>
<p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>
<p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>
<p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>
<p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>
<p>xxxxAutoConfigurartion：自动配置类；</p>
<p>给容器中添加组件</p>
<p>xxxxProperties:封装配置文件中相关属性；</p>
<h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>我们怎么知道哪些自动配置类生效；</p>
<p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>'</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class="params">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure>





<h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p>
<p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p>
<p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p>
<p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p>
<p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p>
<p>​        5、JDBC—数据库驱动；</p>
<p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p>
<p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p>
<p><strong>市面上的日志框架；</strong></p>
<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>
<table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>
<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层）、右边来选一个实现；</p>
<p>日志门面：  SLF4J；</p>
<p>日志实现：Logback；</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>
<p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p>
<h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>
<p>给系统里面导入slf4j的jar和  logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图示；</p>
<p><img src="images/concrete-bindings.png" alt="images/concrete-bindings.png"></p>
<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>
<h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>
<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>
<p><img src="images/legacy.png" alt></p>
<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>
<p>==1、将系统中其他日志框架先排除出去；==</p>
<p>==2、用中间包来替换原有的日志框架；==</p>
<p>==3、我们导入slf4j其他的实现==</p>
<h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>SpringBoot使用它来做日志功能；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>底层依赖关系</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131220946.png" alt></p>
<p>总结：</p>
<p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>
<p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p>
<p>​    3）、中间替换包？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>

<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131221411.png" alt></p>
<p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p>
<p>​            Spring框架用的是commons-logging；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p>
<h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<pre><code>日志输出格式：
    %d表示日期时间，
    %thread表示线程名，
    %-5level：级别从左显示5个字符宽度
    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
    %msg：日志消息，
    %n是换行符
--&gt;
%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.atguigu</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#logging.path=</span></span><br><span class="line"><span class="comment"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径；</span></span><br><span class="line"><span class="comment">#logging.file=G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody></table>
<h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  	可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>
<p> <code>no applicable action for [springProfile]</code></p>
<h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>切换为log4j2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p>
<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>
<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>
<p><strong>3）、自己编写业务代码；</strong></p>
<p><strong>自动配置原理？</strong></p>
<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxxxAutoConfiguration：帮我们给容器中自动配置组件；</span><br><span class="line">xxxxProperties:配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure>



<h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebMvcAuotConfiguration：</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">			customizeResourceHandlerRegistration(</span><br><span class="line">					registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">							.addResourceLocations(</span><br><span class="line">									<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">					.setCachePeriod(cachePeriod));</span><br><span class="line">		&#125;</span><br><span class="line">		String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">         	<span class="comment">//静态资源文件夹映射</span></span><br><span class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">			customizeResourceHandlerRegistration(</span><br><span class="line">					registry.addResourceHandler(staticPathPattern)</span><br><span class="line">							.addResourceLocations(</span><br><span class="line">									<span class="keyword">this</span>.resourceProperties.getStaticLocations())</span><br><span class="line">					.setCachePeriod(cachePeriod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//配置欢迎页映射</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class="line">				<span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//配置喜欢的图标</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">			mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">             	<span class="comment">//所有  **/favicon.ico </span></span><br><span class="line">			mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>,</span><br><span class="line">					faviconRequestHandler()));</span><br><span class="line">			<span class="keyword">return</span> mapping;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">			requestHandler</span><br><span class="line">					.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line">			<span class="keyword">return</span> requestHandler;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p>
<p>​    webjars：以jar包的方式引入静态资源；</p>
<p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180203181751.png" alt></p>
<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class="line">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class="line">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class="line">&quot;classpath:&#x2F;public&#x2F;&quot; </span><br><span class="line">&quot;&#x2F;&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure>

<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>
<p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p>
<p>​    localhost:8080/   找index页面</p>
<p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p>
<h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>
<p><img src="images/template-engine.png" alt></p>
<p>SpringBoot推荐的Thymeleaf；</p>
<p>语法更简单，功能更强大；</p>
<h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          	2.1.6</span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">切换thymeleaf版本</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">  	<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>
<p>使用：</p>
<p>1、导入thymeleaf的名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、使用thymeleaf语法；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p>
<p>​    th：任意html属性；来替换原生属性的值</p>
<p><img src="images/2018-02-04_123955.png" alt></p>
<p>2）、表达式？</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:（表达式语法）</span></span><br><span class="line">    <span class="attr">Variable</span> <span class="string">Expressions: $&#123;...&#125;：获取变量值；OGNL；</span></span><br><span class="line">    		<span class="attr">1）、获取对象的属性、调用方法</span></span><br><span class="line">    		<span class="attr">2）、使用内置的基本对象：</span></span><br><span class="line"><span class="comment">    			#ctx : the context object.</span></span><br><span class="line"><span class="comment">    			#vars: the context variables.</span></span><br><span class="line"><span class="comment">                #locale : the context locale.</span></span><br><span class="line"><span class="comment">                #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">                #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">                #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">                #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">                </span><br><span class="line">                <span class="attr">$&#123;session.foo&#125;</span></span><br><span class="line">            <span class="attr">3）、内置的一些工具对象：</span></span><br><span class="line"><span class="comment">#execInfo : information about the template being processed.</span></span><br><span class="line"><span class="comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">#conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">#numbers : methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">#objects : methods for objects in general.</span></span><br><span class="line"><span class="comment">#bools : methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">#arrays : methods for arrays.</span></span><br><span class="line"><span class="comment">#lists : methods for lists.</span></span><br><span class="line"><span class="comment">#sets : methods for sets.</span></span><br><span class="line"><span class="comment">#maps : methods for maps.</span></span><br><span class="line"><span class="comment">#aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Selection</span> <span class="string">Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span></span><br><span class="line">    	<span class="meta">补充：配合</span> <span class="string">th:object="$&#123;session.user&#125;：</span></span><br><span class="line">   <span class="meta">&lt;div</span> <span class="string">th:object="$&#123;session.user&#125;"&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Name</span>: <span class="string">&lt;span th:text="*&#123;firstName&#125;"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Surname</span>: <span class="string">&lt;span th:text="*&#123;lastName&#125;"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Nationality</span>: <span class="string">&lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="attr">&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">Message</span> <span class="string">Expressions: #&#123;...&#125;：获取国际化内容</span></span><br><span class="line">    <span class="attr">Link</span> <span class="string">URL Expressions: @&#123;...&#125;：定义URL；</span></span><br><span class="line">    		<span class="meta">@&#123;/order/process(execId</span>=<span class="string">$&#123;execId&#125;,execType='FAST')&#125;</span></span><br><span class="line">    <span class="attr">Fragment</span> <span class="string">Expressions: ~&#123;...&#125;：片段引用表达式</span></span><br><span class="line">    		<span class="meta">&lt;div</span> <span class="string">th:insert="~&#123;commons :: main&#125;"&gt;...&lt;/div&gt;</span></span><br><span class="line">    		</span><br><span class="line"><span class="attr">Literals（字面量）</span></span><br><span class="line">      <span class="attr">Text</span> <span class="string">literals: 'one text' , 'Another one!' ,…</span></span><br><span class="line">      <span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line">      <span class="attr">Boolean</span> <span class="string">literals: true , false</span></span><br><span class="line">      <span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line">      <span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br><span class="line"><span class="attr">Text</span> <span class="string">operations:（文本操作）</span></span><br><span class="line">    <span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class="line"><span class="attr">Arithmetic</span> <span class="string">operations:（数学运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: + , - , * , / , %</span></span><br><span class="line">    <span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">operations:（布尔运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: and , or</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br><span class="line"><span class="attr">Comparisons</span> <span class="string">and equality:（比较运算）</span></span><br><span class="line">    <span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line">    <span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br><span class="line"><span class="attr">Conditional</span> <span class="string">operators:条件运算（三元运算符）</span></span><br><span class="line">    <span class="meta">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line">    <span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line">    <span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br><span class="line"><span class="attr">Special</span> <span class="string">tokens:</span></span><br><span class="line">    <span class="meta">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure>

<h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>
<h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p>
<p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>
<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>
<li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>
</li>
<li><p>Static <code>index.html</code> support. 静态首页访问</p>
</li>
<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>
<p>​</p>
</li>
<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>
<ul>
<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>
<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"date-format"</span>)<span class="comment">//在文件中配置日期格式化的规则</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());<span class="comment">//日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p>
<ul>
<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>
<ul>
<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>
</li>
<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>
<p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p>
<p>​</p>
</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>
<p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化WebDataBinder；</span><br><span class="line">请求数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JavaBean；</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>
<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>
<h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p>
<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>
<p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line">     <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">             <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">           	<span class="comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span></span><br><span class="line">           	<span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line">             <span class="comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class="line">              <span class="comment">//       delegate.addViewControllers(registry);</span></span><br><span class="line">              <span class="comment">//   &#125;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p>
<p>​    4）、我们的配置类也会被调用；</p>
<p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>
<h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>
<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>为什么@EnableWebMvc自动配置就失效了；</p>
<p>1）@EnableWebMvc的核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>2）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>3）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">WebMvcConfigurerAdapter</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>
<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>
<h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>
<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>
<p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p>
<p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>
<h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="comment">//@EnableWebMvc   不要接管SpringMVC</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p>
<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>
<p>3）、在页面使用fmt:message取出国际化内容</p>
<p>步骤：</p>
<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211130721.png" alt></p>
<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Comma-separated list of basenames (essentially a fully-qualified classpath</span></span><br><span class="line"><span class="comment">	 * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class="line"><span class="comment">	 * slash based locations. If it doesn't contain a package qualifier (such as</span></span><br><span class="line"><span class="comment">	 * "org.mypackage"), it will be resolved from the classpath root.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String basename = <span class="string">"messages"</span>;  </span><br><span class="line">    <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line">            <span class="comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">			messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">					StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">			messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">		&#125;</span><br><span class="line">		messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">		messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">		messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line">		<span class="keyword">return</span> messageSource;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>3）、去页面获取国际化的值；</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211134506.png" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>/&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：根据浏览器语言设置的信息切换了国际化；</p>
<p>原理：</p>
<p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">		<span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line">		<span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">					.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">			&#125;</span><br><span class="line">			AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">			localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">			<span class="keyword">return</span> localeResolver;</span><br><span class="line">		&#125;</span><br><span class="line">默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure>

<p>4）、点击链接切换国际化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p>
<p>1）、禁用模板引擎的缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 禁用缓存</span><br><span class="line">spring.thymeleaf.cache&#x3D;false</span><br></pre></td></tr></table></figure>

<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>
<p>登陆错误消息的显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注册拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//注册拦截器</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//super.addInterceptors(registry);</span></span><br><span class="line">              <span class="comment">//静态资源；  *.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                      .excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> adapter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>
<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>
<p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD（uri来区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
<p>2）、实验的请求架构;</p>
<table>
<thead>
<tr>
<th>实验功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工(来到修改页面)</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<p>3）、员工列表：</p>
<h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class="line"></span><br><span class="line">3、默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure>



<p>三种引入公共片段的th属性：</p>
<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>
<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引入方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>引入片段的时候传入参数： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/main.html&#125;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"currentColor"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提交的数据格式不对：生日：日期；</p>
<p>2017-12-12；2017/12/12；2017.12.12；</p>
<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>
<p>2017-12-12—Date； 类型转换，格式化;</p>
<p>默认日期是按照/的方式；</p>
<h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.email&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;depts&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp!=null&#125;?'修改':'添加'"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".deleteBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//删除当前员工的</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>)).submit();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p>
<p>​        1）、浏览器，返回一个默认的错误页面</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173408.png" alt></p>
<p>  浏览器发送请求的请求头：</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180347.png" alt></p>
<p>​        2）、如果是其他客户端，默认响应一个json数据</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173527.png" alt></p>
<p>​        <img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180504.png" alt></p>
<p>原理：</p>
<p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>
<pre><code>给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">帮我们在页面共享信息；</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">		errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">		addStatus(errorAttributes, requestAttributes);</span><br><span class="line">		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class="line">		addPath(errorAttributes, requestAttributes);</span><br><span class="line">		<span class="keyword">return</span> errorAttributes;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>​    2、BasicErrorController：处理默认/error请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)<span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">		response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">		ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">		<span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model) : modelAndView);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span></span><br><span class="line">	<span class="meta">@ResponseBody</span>    <span class="comment">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">		Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">				isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>​    3、ErrorPageCustomizer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure>



<p>​    4、DefaultErrorViewResolver：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">			Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">		ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line">		<span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modelAndView;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">		String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">		TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">				.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">		<span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line">		<span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>​    步骤：</p>
<p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p>
<p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">   <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">      <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>
<p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p>
<p>​            页面能获取的信息；</p>
<p>​                timestamp：时间戳</p>
<p>​                status：状态码</p>
<p>​                error：错误提示</p>
<p>​                exception：异常对象</p>
<p>​                message：异常消息</p>
<p>​                errors：JSR303数据校验的错误都在这里</p>
<p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>
<p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>
<h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure>



<p>​        2）、转发到/error进行自适应响应效果处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">        .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">       map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">       map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">       <span class="comment">//转发到/error</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>
<p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>
<p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>
<p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>
<p>自定义ErrorAttributes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">"company"</span>,<span class="string">"atguigu"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180228135513.png" alt></p>
<h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180301142915.png" alt></p>
<p>问题？</p>
<h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/crud</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>

<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<p>ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ServletListenerRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>
<p>DispatcherServletAutoConfiguration中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(value = DispatcherServlet<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class="line">   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());</span><br><span class="line">    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class="line">    <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">    </span><br><span class="line">   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">   registration.setLoadOnStartup(</span><br><span class="line">         <span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">      registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>
<h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302114401.png" alt></p>
<p>默认支持：</p>
<p>Tomcat（默认使用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Jetty</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Undertow</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//导入<span class="title">BeanPostProcessorsRegistrar</span>：<span class="title">Spring</span>注解版；给容器中导入一些组件</span></span><br><span class="line"><span class="class">//导入了<span class="title">EmbeddedServletContainerCustomizerBeanPostProcessor</span>：</span></span><br><span class="line"><span class="class">//后置处理器：<span class="title">bean</span>初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Tomcat</span>.<span class="title">class</span> &#125;)//判断当前是否引入了<span class="title">Tomcat</span>依赖；</span></span><br><span class="line"><span class="class">	@<span class="title">ConditionalOnMissingBean</span>(<span class="title">value</span> </span>= EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>, <span class="title">search</span> </span>= SearchStrategy.CURRENT)<span class="comment">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Server</span>.<span class="title">class</span>, <span class="title">Loader</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">			<span class="title">WebAppContext</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">	@<span class="title">ConditionalOnMissingBean</span>(<span class="title">value</span> </span>= EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>, <span class="title">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Undertow</span>.<span class="title">class</span>, <span class="title">SslClientAuthMode</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">	@<span class="title">ConditionalOnMissingBean</span>(<span class="title">value</span> </span>= EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>, <span class="title">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取嵌入式的Servlet容器</span></span><br><span class="line">   <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         ServletContextInitializer... initializers)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png" alt></p>
<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png" alt></p>
<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Tomcat</span></span><br><span class="line">   Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">   File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">         : createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">   Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">   tomcat.getService().addConnector(connector);</span><br><span class="line">   customizeConnector(connector);</span><br><span class="line">   tomcat.setConnector(connector);</span><br><span class="line">   tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">   configureEngine(tomcat.getEngine());</span><br><span class="line">   <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">      tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">   &#125;</span><br><span class="line">   prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class="line">   <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>



<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>
<p>怎么修改的原理？</p>
<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line">   <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class="line">    <span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class="line">        customizer.customize(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Look up does not include the parent context</span></span><br><span class="line">        <span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory</span><br><span class="line">            <span class="comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class="line">            <span class="comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">            .getBeansOfType(EmbeddedServletContainerCustomizer<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                            <span class="title">false</span>, <span class="title">false</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">values</span>())</span>;</span><br><span class="line">        Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerProperties也是定制器</span><br></pre></td></tr></table></figure>

<p>步骤：</p>
<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>
<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>
<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>
<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>
<p>###5）、嵌入式Servlet容器启动原理；</p>
<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>
<p>获取嵌入式的Servlet容器工厂：</p>
<p>1）、SpringBoot应用启动运行run方法</p>
<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>
<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>
<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>
<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>
<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>
<p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>
<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>
<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>
<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>
<p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p>
<h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>
<p>​        优点：简单、便携；</p>
<p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>
<p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>
<p>2）、将嵌入式的Tomcat指定为provided；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">      <span class="keyword">return</span> application.sources(SpringBoot04WebJspApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）、启动服务器就可以使用；</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>
<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>
<p>servlet3.0（Spring注解版）：</p>
<p>8.2.4 Shared libraries / runtimes pluggability：</p>
<p>规则：</p>
<p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>
<p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>
<p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>
<p>流程：</p>
<p>1）、启动Tomcat</p>
<p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p>
<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>
<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>
<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302221835.png" alt></p>
<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>
<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建SpringApplicationBuilder</span></span><br><span class="line">   SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">   StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">   environment.initPropertySources(servletContext, <span class="keyword">null</span>);</span><br><span class="line">   builder.environment(environment);</span><br><span class="line">   builder.main(getClass());</span><br><span class="line">   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">      servletContext.setAttribute(</span><br><span class="line">            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">      builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">   &#125;</span><br><span class="line">   builder.initializers(</span><br><span class="line">         <span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">   builder = configure(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">   SpringApplication application = builder.build();</span><br><span class="line">   <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class="line">         .findAnnotation(getClass(), Configuration<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">      application.getSources().add(getClass());</span><br><span class="line">   &#125;</span><br><span class="line">   Assert.state(!application.getSources().isEmpty(),</span><br><span class="line">         <span class="string">"No SpringApplication sources have been defined. Either override the "</span></span><br><span class="line">               + <span class="string">"configure method or add an @Configuration annotation"</span>);</span><br><span class="line">   <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">      application.getSources().add(ErrorPageFilterConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">   <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7）、Spring的应用就启动并且创建IOC容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//刷新IOC容器</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p>
<h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>
<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145450.png" alt></p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145531.png" alt></p>
<h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p>
<p>docker客户端(Client)：连接docker主机进行操作；</p>
<p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p>
<p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p>
<p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303165113.png" alt></p>
<p>使用Docker的步骤：</p>
<p>1）、安装Docker</p>
<p>2）、去Docker仓库找到这个软件对应的镜像；</p>
<p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>
<p>4）、对容器的启动停止就是对软件的启动停止；</p>
<h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p>
<p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p>
<p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p>
<p>​    4）、使用客户端连接linux服务器进行命令操作；</p>
<p>​    5）、设置虚拟机网络；</p>
<p>​        桥接网络===选好网卡====接入网线；</p>
<p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>​    7）、查看linux的ip地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>​    8）、使用客户端连接linux；</p>
<h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上</span><br><span class="line">uname -r</span><br><span class="line">2、安装docker</span><br><span class="line">yum install docker</span><br><span class="line">3、输入y确认安装</span><br><span class="line">4、启动docker</span><br><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">Docker version 1.12.6, build 3e8e77d/1.12.6</span><br><span class="line">5、开机启动docker</span><br><span class="line">[root@localhost ~]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">6、停止docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p>
<p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]# docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name/container-id</span><br><span class="line"></span><br><span class="line">更多命令参看</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span><br><span class="line">可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure>



<h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>



<p>错误的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure>

<p>正确的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure>

<p>做了端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure>



<p>几个其他的高级操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag</span><br><span class="line">把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>



<h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>
<p>​    数据源的相关配置都在DataSourceProperties里面；</p>
<p>自动配置原理：</p>
<p>org.springframework.boot.autoconfigure.jdbc：</p>
<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>
<p>2、SpringBoot默认可以支持；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure>

<p>3、自定义数据源类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generic DataSource configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DataSource<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">name</span> </span>= <span class="string">"spring.datasource.type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">      <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>
<p>​    作用：</p>
<p>​        1）、runSchemaScripts();运行建表语句；</p>
<p>​        2）、runDataScripts();运行插入数据的sql语句；</p>
<p>默认只需要将文件命名为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">schema-*.sql、data-*.sql</span></span><br><span class="line"><span class="attr">默认规则：schema.sql，schema-all.sql；</span></span><br><span class="line"><span class="meta">可以使用</span>   <span class="string"></span></span><br><span class="line">	<span class="attr">schema</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">classpath:department.sql</span></span><br><span class="line">      <span class="attr">指定位置</span></span><br></pre></td></tr></table></figure>

<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>
<h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">导入druid数据源</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.15.21"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180305194443.png" alt></p>
<p>步骤：</p>
<p>​    1）、配置数据源相关属性（见上一节Druid）</p>
<p>​    2）、给数据库建表</p>
<p>​    3）、创建JavaBean</p>
<h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringBoot06DataMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>

<p>更多使用参照</p>
<p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306105412.png" alt></p>
<h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>
<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>

<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）、基本的配置JpaProperties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"> <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line"><span class="comment">#     更新或者创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#    控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>
<p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<p><strong>SpringApplicationRunListener</strong></p>
<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<p><strong>CommandLineRunner</strong></p>
<p>启动流程：</p>
<h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialize(sources);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存主配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前是否一个web应用</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">//从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">//从多个配置类中找到有main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145727.png" alt></p>
<p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145855.png" alt></p>
<h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//封装命令行参数</span></span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      <span class="comment">//准备环境</span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">       		<span class="comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span></span><br><span class="line">       </span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">       </span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">       <span class="comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span></span><br><span class="line">       <span class="comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span></span><br><span class="line">       <span class="comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       <span class="comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span></span><br><span class="line">       <span class="comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">       <span class="comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">       <span class="comment">//ApplicationRunner先回调，CommandLineRunner再回调</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">       <span class="comment">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span></span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationContextInitializer...initialize..."</span>+applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringApplicationRunListener</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须有的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...starting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        Object o = environment.getSystemProperties().get(<span class="string">"os.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...environmentPrepared.."</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextPrepared..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextLoaded..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...finished..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置（META-INF/spring.factories）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.atguigu.springboot.listener.HelloApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure>





<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationRunner...run...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>CommandLineRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CommandLineRunner...run..."</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p>
<p>​    1、这个场景需要使用到的依赖是什么？</p>
<p>​    2、如何编写自动配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span>  <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>  <span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">//给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span>结合相关xxxProperties类来绑定相关的配置</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">//让xxxProperties生效加入到容器中</span></span><br><span class="line"></span><br><span class="line">自动配置类要能加载</span><br><span class="line">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure>

<p>​    3、模式：</p>
<p>启动器只用来做依赖导入；</p>
<p>专门来写一个自动配置模块；</p>
<p>启动器依赖自动配置；别人只需要引入启动器（starter）</p>
<p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p>
<p>步骤：</p>
<p>1）、启动器模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自动配置模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）、自动配置模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"atguigu.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">"-"</span> +name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>
]]></content>
  </entry>
</search>
